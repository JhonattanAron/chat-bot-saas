{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/chatAsistantStore.ts"],"sourcesContent":["import type { APIResponse } from \"@/interfaces/api-response-interface\";\r\nimport { create } from \"zustand\";\r\n\r\ninterface FAQ {\r\n  _id?: string;\r\n  question: string;\r\n  answer: string;\r\n  category: string;\r\n}\r\n\r\ninterface Integration {\r\n  name: string;\r\n  type: string;\r\n  config: Record<string, any>;\r\n}\r\n\r\nexport interface ChatAssistant {\r\n  _id?: string;\r\n  user_id: string;\r\n  name: string;\r\n  description: string;\r\n  funciones?: [];\r\n  integrations?: Integration[]; // <-- Nuevo campo\r\n  type: string;\r\n  status: string;\r\n  use_case: string;\r\n  welcome_message: string;\r\n  faqs: FAQ[];\r\n}\r\n\r\ninterface ChatAssistantStore {\r\n  assistants: ChatAssistant[];\r\n  assistant?: ChatAssistant;\r\n  loading: boolean;\r\n  error: string | null;\r\n  createAssistant: (assistant: ChatAssistant) => Promise<APIResponse>;\r\n  updateAssistant: (assistant: ChatAssistant) => Promise<void>;\r\n  createFaq: (faqData: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqs: FAQ[];\r\n  }) => Promise<void>;\r\n  updateFaq: (faqUpdate: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n    update: Partial<FAQ>;\r\n  }) => Promise<void>;\r\n  deleteFaq: (params: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n  }) => Promise<void>;\r\n  getAssistants: (user_id: string) => Promise<ChatAssistant[]>;\r\n  getAssistantById: (\r\n    chat_id: string,\r\n    user_id: string\r\n  ) => Promise<ChatAssistant | undefined>;\r\n  deleteAssistant: (id: string) => Promise<void>;\r\n  setAssistants: (assistants: ChatAssistant[]) => void;\r\n  setError: (error: string | null) => void;\r\n}\r\n\r\nexport const useChatAssistantStore = create<ChatAssistantStore>((set, get) => ({\r\n  assistants: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  setAssistants: (assistants) => set({ assistants }),\r\n  setError: (error) => set({ error }),\r\n\r\n  createFaq: async (faqData) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/faq-tasks\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(faqData),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error creating FAQ\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateFaq: async (faqUpdate) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/faq-tasks\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(faqUpdate),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error updating FAQ\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteFaq: async (params) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const query = new URLSearchParams(\r\n        params as Record<string, string>\r\n      ).toString();\r\n      const res = await fetch(`/api/faq-tasks?${query}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error deleting FAQ\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  getAssistants: async (user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(`/api/asistant-tasks?user_id=${user_id}`);\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching assistants\");\r\n      set({ assistants: data, loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  getAssistantById: async (chat_id, user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/asistant-get?chat_id=${chat_id}&user_id=${user_id}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching assistants\");\r\n      set({ assistant: data, loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  createAssistant: async (assistant) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          user_id: assistant.user_id,\r\n          name: assistant.name,\r\n          description: assistant.description,\r\n          funciones: assistant.funciones,\r\n          integrations: assistant.integrations, // <-- Se envía\r\n          type: assistant.type,\r\n          status: assistant.status,\r\n          use_case: assistant.use_case,\r\n          welcome_message: assistant.welcome_message,\r\n        }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        return { data, error: true, local: assistant };\r\n      } else {\r\n        set((state) => ({\r\n          assistants: [...state.assistants, data],\r\n          loading: false,\r\n        }));\r\n        return { data, error: false };\r\n      }\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateAssistant: async (assistant) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(assistant), // Incluye integrations también\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error updating assistant\");\r\n      set((state) => ({\r\n        assistants: state.assistants.map((a) =>\r\n          a._id === assistant._id ? { ...a, ...assistant } : a\r\n        ),\r\n        loading: false,\r\n      }));\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  deleteAssistant: async (id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ id }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error deleting assistant\");\r\n      set((state) => ({\r\n        assistants: state.assistants.filter((a) => a._id !== id),\r\n        loading: false,\r\n      }));\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n}));\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/ProductStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport interface Product {\r\n  _id: string;\r\n  name: string;\r\n  price: string;\r\n  description: string;\r\n  tags?: string[];\r\n  available?: boolean;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface ProductStore {\r\n  products: Product[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  AddProduct: (\r\n    product: Product,\r\n    user_id: string,\r\n    assistant_id: string\r\n  ) => Promise<void>;\r\n  fetchProducts: (user_id: string, assistant_id: string) => Promise<void>;\r\n  fetchProductById: (id: string) => Promise<Product | null>;\r\n  updateProduct: (\r\n    id: string,\r\n    data: Partial<Product>,\r\n    user_id: string\r\n  ) => Promise<void>;\r\n  deleteProduct: (id: string) => Promise<void>;\r\n  setProducts: (products: Product[]) => void;\r\n  setError: (error: string | null) => void;\r\n}\r\n\r\nexport const useProductStore = create<ProductStore>((set, get) => ({\r\n  products: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  setProducts: (products) => set({ products }),\r\n  setError: (error) => set({ error }),\r\n\r\n  AddProduct: async (product, user_id, assistant_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/products-tasks?user_id=${encodeURIComponent(\r\n          user_id\r\n        )}&assistant_id=${encodeURIComponent(assistant_id)}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching products\");\r\n      set({ products: data, loading: false });\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  fetchProducts: async (user_id, assistant_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/products-tasks?user_id=${encodeURIComponent(\r\n          user_id\r\n        )}&assistant_id=${encodeURIComponent(assistant_id)}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching products\");\r\n      set({ products: data, loading: false });\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  fetchProductById: async (id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/products-tasks?id=${encodeURIComponent(id)}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching product\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      return null;\r\n    }\r\n  },\r\n\r\n  updateProduct: async (id, data, user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/products-tasks?id=${encodeURIComponent(\r\n          id\r\n        )}&user_id=${encodeURIComponent(user_id)}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      const result = await res.json();\r\n      if (!res.ok) throw new Error(result.error || \"Error updating product\");\r\n      // Opcional: refresca productos\r\n      // await get().fetchProducts(user_id);\r\n      set({ loading: false });\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  deleteProduct: async (id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/products-tasks?id=${encodeURIComponent(id)}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n      const result = await res.json();\r\n      if (!res.ok) throw new Error(result.error || \"Error deleting product\");\r\n      set((state) => ({\r\n        products: state.products.filter((p) => p.id !== id),\r\n        loading: false,\r\n      }));\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n}));\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 397, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/functionsStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport interface AssistantFunction {\r\n  [x: string]: string | undefined;\r\n  id?: string;\r\n  name: string;\r\n  description?: string;\r\n  type: \"api\" | \"custom\";\r\n  api?: {\r\n    url: string;\r\n    method: string;\r\n    headers?: { key: string; value: string }[];\r\n    parameters?: {\r\n      name: string;\r\n      type: string;\r\n      required: boolean;\r\n      description?: string;\r\n    }[];\r\n    auth?: { type: string; value: string };\r\n  };\r\n  code?: string;\r\n  credentials?: { name: string; value: string; description?: string }[];\r\n  hasCode?: boolean;\r\n  hasApi?: boolean;\r\n}\r\n\r\ninterface FunctionsStore {\r\n  functions: AssistantFunction[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  fetchFunctions: (user_id: string, assistant_id: string) => Promise<void>;\r\n  addFunction: (\r\n    user_id: string,\r\n    assistant_id: string,\r\n    func: AssistantFunction\r\n  ) => Promise<any>;\r\n  updateFunction: (\r\n    user_id: string,\r\n    assistant_id: string,\r\n    functionId: string,\r\n    func: Partial<AssistantFunction>\r\n  ) => Promise<any>;\r\n  deleteFunction: (\r\n    user_id: string,\r\n    assistant_id: string,\r\n    functionId: string\r\n  ) => Promise<any>;\r\n  setFunctions: (functions: AssistantFunction[]) => void;\r\n  setError: (error: string | null) => void;\r\n}\r\n\r\nexport const useFunctionsStore = create<FunctionsStore>((set, get) => ({\r\n  functions: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  setFunctions: (functions) => set({ functions }),\r\n  setError: (error) => set({ error }),\r\n\r\n  fetchFunctions: async (user_id, assistant_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/functions-tasks?user_id=${encodeURIComponent(\r\n          user_id\r\n        )}&assistant_id=${encodeURIComponent(assistant_id)}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok || !data.success)\r\n        throw new Error(data.error || \"Error fetching functions\");\r\n      set({ functions: data.functions, loading: false });\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  addFunction: async (user_id, assistant_id, func) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/functions-tasks\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ user_id, assistant_id, function: func }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok || !data.success)\r\n        throw new Error(data.error || \"Error adding function\");\r\n      // Opcional: refresca funciones\r\n      await get().fetchFunctions(user_id, assistant_id);\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateFunction: async (user_id, assistant_id, functionId, func) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(`/api/functions-tasks/${functionId}`, {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ user_id, assistant_id, function: func }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok || !data.success)\r\n        throw new Error(data.error || \"Error updating function\");\r\n      await get().fetchFunctions(user_id, assistant_id);\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteFunction: async (user_id, assistant_id, functionId) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const url = `/api/functions-tasks/${functionId}?user_id=${encodeURIComponent(\r\n        user_id\r\n      )}&assistant_id=${encodeURIComponent(assistant_id)}`;\r\n      const res = await fetch(url, { method: \"DELETE\" });\r\n      const data = await res.json();\r\n      if (!res.ok || !data.success)\r\n        throw new Error(data.error || \"Error deleting function\");\r\n      await get().fetchFunctions(user_id, assistant_id);\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n}));\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 532, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/chatControlStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\nimport { devtools } from \"zustand/middleware\";\r\n\r\ntype Message = {\r\n  role: \"user\" | \"assistant\";\r\n  content: string;\r\n  createdAt?: string;\r\n};\r\n\r\ntype Chat = {\r\n  id: string;\r\n  userId: string;\r\n  assistant_id: string;\r\n  messages: Message[];\r\n  lastActivity: string;\r\n  tokenUsage: {\r\n    input: number;\r\n    output: number;\r\n  };\r\n};\r\n\r\ntype ChatStore = {\r\n  currentChat: Chat | null;\r\n  chats: Chat[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  startChat: (payload: {\r\n    userId: string;\r\n    assistant_id: string;\r\n    promt: string;\r\n  }) => Promise<void>;\r\n  sendMessage: (payload: {\r\n    chatId: string;\r\n    assistant_id: string;\r\n    role: \"user\" | \"assistant\";\r\n    content: string;\r\n  }) => Promise<void>;\r\n  fetchChat: (chatId: string) => Promise<void>;\r\n  fetchUserChats: (userId: string) => Promise<void>;\r\n  clearError: () => void;\r\n};\r\n\r\nexport const useChatStore = create<ChatStore>()(\r\n  devtools((set) => ({\r\n    currentChat: null,\r\n    chats: [],\r\n    loading: false,\r\n    error: null,\r\n\r\n    startChat: async ({ userId, assistant_id, promt }) => {\r\n      set({ loading: true, error: null });\r\n      try {\r\n        const res = await fetch(\"/api/chat/start\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ userId, assistant_id, promt }),\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (!res.ok) throw new Error(data.error || \"Failed to start chat\");\r\n        return data;\r\n      } catch (err: any) {\r\n        set({ error: err.message, loading: false });\r\n      }\r\n    },\r\n\r\n    sendMessage: async ({ chatId, assistant_id, role, content }) => {\r\n      set({ loading: true, error: null });\r\n      try {\r\n        const res = await fetch(\"/api/chat/message\", {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify({ chatId, assistant_id, role, content }),\r\n        });\r\n        const data = await res.json();\r\n\r\n        if (!res.ok) throw new Error(data.error || \"Failed to send message\");\r\n\r\n        set((state) => ({\r\n          currentChat: state.currentChat\r\n            ? {\r\n                ...state.currentChat,\r\n                messages: [\r\n                  ...(state.currentChat.messages || []),\r\n                  { role, content },\r\n                  { role: \"assistant\", content: data.response },\r\n                ],\r\n              }\r\n            : null,\r\n          loading: false,\r\n        }));\r\n      } catch (err: any) {\r\n        set({ error: err.message, loading: false });\r\n      }\r\n    },\r\n\r\n    fetchChat: async (chatId) => {\r\n      set({ loading: true, error: null });\r\n      try {\r\n        const res = await fetch(`/api/chat/${chatId}`);\r\n        const data = await res.json();\r\n\r\n        if (!res.ok) throw new Error(data.error || \"Failed to fetch chat\");\r\n\r\n        set({ currentChat: data.chat, loading: false });\r\n      } catch (err: any) {\r\n        set({ error: err.message, loading: false });\r\n      }\r\n    },\r\n\r\n    fetchUserChats: async (userId) => {\r\n      set({ loading: true, error: null });\r\n      try {\r\n        const res = await fetch(`/api/chat/user/${userId}`);\r\n        const data = await res.json();\r\n\r\n        if (!res.ok) throw new Error(data.error || \"Failed to fetch chats\");\r\n\r\n        set({ chats: data.chats, loading: false });\r\n      } catch (err: any) {\r\n        set({ error: err.message, loading: false });\r\n      }\r\n    },\r\n\r\n    clearError: () => set({ error: null }),\r\n  }))\r\n);\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAyCO,MAAM,eAAe,CAAA,GAAA,2IAAA,CAAA,SAAM,AAAD,IAC/B,CAAA,GAAA,gJAAA,CAAA,WAAQ,AAAD,EAAE,CAAC,MAAQ,CAAC;QACjB,aAAa;QACb,OAAO,EAAE;QACT,SAAS;QACT,OAAO;QAEP,WAAW,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,KAAK,EAAE;YAC/C,IAAI;gBAAE,SAAS;gBAAM,OAAO;YAAK;YACjC,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM,mBAAmB;oBACzC,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBAAE;wBAAQ;wBAAc;oBAAM;gBACrD;gBACA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;gBAC3C,OAAO;YACT,EAAE,OAAO,KAAU;gBACjB,IAAI;oBAAE,OAAO,IAAI,OAAO;oBAAE,SAAS;gBAAM;YAC3C;QACF;QAEA,aAAa,OAAO,EAAE,MAAM,EAAE,YAAY,EAAE,IAAI,EAAE,OAAO,EAAE;YACzD,IAAI;gBAAE,SAAS;gBAAM,OAAO;YAAK;YACjC,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM,qBAAqB;oBAC3C,QAAQ;oBACR,SAAS;wBAAE,gBAAgB;oBAAmB;oBAC9C,MAAM,KAAK,SAAS,CAAC;wBAAE;wBAAQ;wBAAc;wBAAM;oBAAQ;gBAC7D;gBACA,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;gBAE3C,IAAI,CAAC,QAAU,CAAC;wBACd,aAAa,MAAM,WAAW,GAC1B;4BACE,GAAG,MAAM,WAAW;4BACpB,UAAU;mCACJ,MAAM,WAAW,CAAC,QAAQ,IAAI,EAAE;gCACpC;oCAAE;oCAAM;gCAAQ;gCAChB;oCAAE,MAAM;oCAAa,SAAS,KAAK,QAAQ;gCAAC;6BAC7C;wBACH,IACA;wBACJ,SAAS;oBACX,CAAC;YACH,EAAE,OAAO,KAAU;gBACjB,IAAI;oBAAE,OAAO,IAAI,OAAO;oBAAE,SAAS;gBAAM;YAC3C;QACF;QAEA,WAAW,OAAO;YAChB,IAAI;gBAAE,SAAS;gBAAM,OAAO;YAAK;YACjC,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM,CAAC,UAAU,EAAE,QAAQ;gBAC7C,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;gBAE3C,IAAI;oBAAE,aAAa,KAAK,IAAI;oBAAE,SAAS;gBAAM;YAC/C,EAAE,OAAO,KAAU;gBACjB,IAAI;oBAAE,OAAO,IAAI,OAAO;oBAAE,SAAS;gBAAM;YAC3C;QACF;QAEA,gBAAgB,OAAO;YACrB,IAAI;gBAAE,SAAS;gBAAM,OAAO;YAAK;YACjC,IAAI;gBACF,MAAM,MAAM,MAAM,MAAM,CAAC,eAAe,EAAE,QAAQ;gBAClD,MAAM,OAAO,MAAM,IAAI,IAAI;gBAE3B,IAAI,CAAC,IAAI,EAAE,EAAE,MAAM,IAAI,MAAM,KAAK,KAAK,IAAI;gBAE3C,IAAI;oBAAE,OAAO,KAAK,KAAK;oBAAE,SAAS;gBAAM;YAC1C,EAAE,OAAO,KAAU;gBACjB,IAAI;oBAAE,OAAO,IAAI,OAAO;oBAAE,SAAS;gBAAM;YAC3C;QACF;QAEA,YAAY,IAAM,IAAI;gBAAE,OAAO;YAAK;IACtC,CAAC","debugId":null}},
    {"offset": {"line": 668, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/AutomatizedTaskStore.ts"],"sourcesContent":["import { create } from \"zustand\";\r\n\r\nexport interface AutomatedTask {\r\n  id: string;\r\n  name: string;\r\n  category?: string;\r\n  status: \"active\" | \"inactive\";\r\n  [key: string]: any;\r\n}\r\n\r\ninterface AutomatedTasksState {\r\n  tasks: AutomatedTask[];\r\n  currentTask: AutomatedTask | null;\r\n  logs: any[];\r\n  loading: boolean;\r\n  error: string | null;\r\n\r\n  createTask: (data: Partial<AutomatedTask>) => Promise<any>;\r\n  getTasks: (user_id: string, filters?: Partial<AutomatedTask>) => Promise<any>;\r\n  getTask: (id: string, user_id: string) => Promise<any>;\r\n  updateTask: (\r\n    id: string,\r\n    user_id: string,\r\n    data: Partial<AutomatedTask>\r\n  ) => Promise<any>;\r\n  deleteTask: (id: string, user_id: string) => Promise<any>;\r\n  toggleTaskStatus: (id: string, user_id: string) => Promise<any>;\r\n  executeTask: (id: string, user_id: string, context?: any) => Promise<any>;\r\n  getTaskLogs: (id: string, user_id: string, limit?: number) => Promise<any>;\r\n  testEmailConnection: (emailConfig: any) => Promise<any>;\r\n  handleWebhook: (taskId: string, payload: any) => Promise<any>;\r\n}\r\nconst NEST_API_URL = process.env.NEST_API_URL || \"http://localhost:8080\";\r\n\r\nexport const useAutomatedTasksStore = create<AutomatedTasksState>((set) => ({\r\n  tasks: [],\r\n  currentTask: null,\r\n  logs: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  createTask: async (data) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(`${NEST_API_URL}/automated-tasks`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(data),\r\n      });\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set((state) => ({ tasks: [...state.tasks, json.task] }));\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      set({ error: err.message });\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      set({ loading: false });\r\n    }\r\n  },\r\n\r\n  getTasks: async (user_id, filters = {}) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const params = new URLSearchParams({\r\n        user_id,\r\n        ...filters,\r\n      } as any).toString();\r\n      const res = await fetch(`${NEST_API_URL}/automated-tasks?${params}`);\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set({ tasks: json.tasks });\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      set({ error: err.message });\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      set({ loading: false });\r\n    }\r\n  },\r\n\r\n  getTask: async (id, user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}?user_id=${user_id}`\r\n      );\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set({ currentTask: json.task });\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      set({ error: err.message });\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      set({ loading: false });\r\n    }\r\n  },\r\n\r\n  updateTask: async (id, user_id, data) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}?user_id=${user_id}`,\r\n        {\r\n          method: \"PUT\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(data),\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set((state) => ({\r\n          tasks: state.tasks.map((t) =>\r\n            t.id === id ? { ...t, ...json.task } : t\r\n          ),\r\n        }));\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      set({ error: err.message });\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      set({ loading: false });\r\n    }\r\n  },\r\n\r\n  deleteTask: async (id, user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}?user_id=${user_id}`,\r\n        {\r\n          method: \"DELETE\",\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set((state) => ({\r\n          tasks: state.tasks.filter((t) => t.id !== id),\r\n        }));\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      set({ error: err.message });\r\n      return { success: false, error: err.message };\r\n    } finally {\r\n      set({ loading: false });\r\n    }\r\n  },\r\n\r\n  toggleTaskStatus: async (id, user_id) => {\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}/toggle-status?user_id=${user_id}`,\r\n        {\r\n          method: \"POST\",\r\n        }\r\n      );\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set((state) => ({\r\n          tasks: state.tasks.map((t) =>\r\n            t.id === id ? { ...t, status: json.task.status } : t\r\n          ),\r\n        }));\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      return { success: false, error: err.message };\r\n    }\r\n  },\r\n\r\n  executeTask: async (id, user_id, context) => {\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}/execute?user_id=${user_id}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(context || {}),\r\n        }\r\n      );\r\n      return await res.json();\r\n    } catch (err: any) {\r\n      return { success: false, error: err.message };\r\n    }\r\n  },\r\n\r\n  getTaskLogs: async (id, user_id, limit = 50) => {\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/${id}/logs?user_id=${user_id}&limit=${limit}`\r\n      );\r\n      const json = await res.json();\r\n      if (json.success) {\r\n        set({ logs: json.logs });\r\n      }\r\n      return json;\r\n    } catch (err: any) {\r\n      return { success: false, error: err.message };\r\n    }\r\n  },\r\n\r\n  testEmailConnection: async (emailConfig) => {\r\n    try {\r\n      const res = await fetch(`${NEST_API_URL}/automated-tasks/test-email`, {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(emailConfig),\r\n      });\r\n      return await res.json();\r\n    } catch (err: any) {\r\n      return { success: false, error: err.message };\r\n    }\r\n  },\r\n\r\n  handleWebhook: async (taskId, payload) => {\r\n    try {\r\n      const res = await fetch(\r\n        `${NEST_API_URL}/automated-tasks/webhook/${taskId}`,\r\n        {\r\n          method: \"POST\",\r\n          headers: { \"Content-Type\": \"application/json\" },\r\n          body: JSON.stringify(payload),\r\n        }\r\n      );\r\n      return await res.json();\r\n    } catch (err: any) {\r\n      return { success: false, error: err.message };\r\n    }\r\n  },\r\n}));\r\n"],"names":[],"mappings":"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","debugId":null}}]
}