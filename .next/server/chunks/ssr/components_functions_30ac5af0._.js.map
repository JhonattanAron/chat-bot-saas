{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/components/functions/function-modal.tsx"],"sourcesContent":["\"use client\";\n\nimport { useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogHeader,\n  DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardHeader,\n  CardTitle,\n} from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Trash2, Plus, Eye, EyeOff, Key } from \"lucide-react\";\nimport { AlertTriangle, CheckCircle, Shield, Loader2 } from \"lucide-react\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport SimpleAlert from \"../ui/simple-alert\"; // Assuming this path is correct\n\ninterface FunctionData {\n  id?: string; // Optional ID for editing existing functions\n  name: string;\n  description: string;\n  type: \"api\" | \"custom\";\n  api?: {\n    url: string;\n    method: string;\n    headers: { key: string; value: string }[];\n    parameters: {\n      name: string;\n      type: string;\n      required: boolean;\n      description: string;\n    }[];\n    auth: { type: string; value: string } | null;\n  };\n  code?: string;\n  credentials?: { name: string; value: string; description: string }[];\n}\n\ninterface FunctionModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n  onAddFunction: (functionData: FunctionData) => void;\n  editFunction?: FunctionData; // New prop for editing\n  onEditFunction?: (functionData: FunctionData) => void; // New callback for editing\n  language?: \"en\" | \"es\";\n}\n\nexport function FunctionModal({\n  open,\n  onOpenChange,\n  onAddFunction,\n  editFunction, // Destructure new prop\n  onEditFunction, // Destructure new callback\n  language = \"en\",\n}: FunctionModalProps) {\n  const [functionType, setFunctionType] = useState<\"api\" | \"custom\">(\"api\");\n  const [functionName, setFunctionName] = useState(\"\");\n  const [description, setDescription] = useState(\"\");\n  const [apiUrl, setApiUrl] = useState(\"\");\n  const [method, setMethod] = useState(\"POST\");\n  const [headers, setHeaders] = useState([{ key: \"\", value: \"\" }]);\n  const [parameters, setParameters] = useState([\n    { name: \"\", type: \"string\", required: true, description: \"\" },\n  ]);\n  const [customCode, setCustomCode] = useState(\"\");\n  const [customCredentials, setCustomCredentials] = useState([\n    { name: \"\", value: \"\", description: \"\" },\n  ]);\n  const [showCredentials, setShowCredentials] = useState<{\n    [key: number]: boolean;\n  }>({});\n  const [requiresAuth, setRequiresAuth] = useState(false);\n  const [authType, setAuthType] = useState(\"bearer\");\n  const [authValue, setAuthValue] = useState(\"\");\n  const [isVerifying, setIsVerifying] = useState(false);\n  const [verificationResult, setVerificationResult] = useState<{\n    status: \"pending\" | \"success\" | \"warning\" | \"error\";\n    message: string;\n  } | null>(null);\n  const [showVerificationAlert, setShowVerificationAlert] = useState(false);\n\n  // Function to reset all form fields to their initial state\n  const resetForm = () => {\n    setFunctionType(\"api\");\n    setFunctionName(\"\");\n    setDescription(\"\");\n    setApiUrl(\"\");\n    setMethod(\"POST\");\n    setHeaders([{ key: \"\", value: \"\" }]);\n    setParameters([\n      { name: \"\", type: \"string\", required: true, description: \"\" },\n    ]);\n    setCustomCode(\"\");\n    setCustomCredentials([{ name: \"\", value: \"\", description: \"\" }]);\n    setShowCredentials({});\n    setRequiresAuth(false);\n    setAuthType(\"bearer\");\n    setAuthValue(\"\");\n    setIsVerifying(false);\n    setVerificationResult(null);\n    setShowVerificationAlert(false);\n  };\n\n  // Effect to populate form when editFunction is provided or reset when modal opens/closes\n  useEffect(() => {\n    if (open) {\n      if (editFunction) {\n        // Populate form with editFunction data\n        setFunctionName(editFunction.name || \"\");\n        setDescription(editFunction.description || \"\");\n        setFunctionType(editFunction.type || \"api\");\n\n        if (editFunction.type === \"api\" && editFunction.api) {\n          setApiUrl(editFunction.api.url || \"\");\n          setMethod(editFunction.api.method || \"POST\");\n          setHeaders(editFunction.api.headers || [{ key: \"\", value: \"\" }]);\n          setParameters(\n            editFunction.api.parameters || [\n              { name: \"\", type: \"string\", required: true, description: \"\" },\n            ]\n          );\n          setRequiresAuth(!!editFunction.api.auth);\n          setAuthType(editFunction.api.auth?.type || \"bearer\");\n          // Note: For security, you might not want to pre-fill sensitive auth values.\n          // For this example, we'll pre-fill it as per the original component's pattern.\n          setAuthValue(editFunction.api.auth?.value || \"\");\n        } else if (editFunction.type === \"custom\") {\n          setCustomCode(editFunction.code || \"\");\n          setCustomCredentials(\n            editFunction.credentials || [\n              { name: \"\", value: \"\", description: \"\" },\n            ]\n          );\n          // Reset verification state when loading an existing function for editing\n          setVerificationResult(null);\n          setIsVerifying(false);\n          setShowVerificationAlert(false);\n        }\n      } else {\n        // If no editFunction, reset to default for adding a new function\n        resetForm();\n      }\n    } else {\n      // When modal closes, reset form\n      resetForm();\n    }\n  }, [open, editFunction]); // Depend on open and editFunction\n\n  const handleVerifyFunction = async () => {\n    if (!customCode.trim()) {\n      setVerificationResult({\n        status: \"error\",\n        message:\n          language === \"en\"\n            ? \"Please enter some code before verification\"\n            : \"Por favor ingresa código antes de verificar\",\n      });\n      return;\n    }\n    setShowVerificationAlert(true);\n  };\n\n  const confirmVerification = async () => {\n    setShowVerificationAlert(false);\n    setIsVerifying(true);\n    setVerificationResult(null);\n    try {\n      // Simulate AI verification API call\n      await new Promise((resolve) => setTimeout(resolve, 3000));\n      // Simulate verification result\n      const hasIssues = Math.random() < 0.2; // 20% chance of issues for demo\n      if (hasIssues) {\n        setVerificationResult({\n          status: \"warning\",\n          message:\n            language === \"en\"\n              ? \"Potential security concerns detected. Please review your code.\"\n              : \"Se detectaron posibles problemas de seguridad. Por favor revisa tu código.\",\n        });\n      } else {\n        setVerificationResult({\n          status: \"success\",\n          message:\n            language === \"en\"\n              ? \"Code verification passed! No security issues detected.\"\n              : \"¡Verificación exitosa! No se detectaron problemas de seguridad.\",\n        });\n      }\n    } catch (error) {\n      setVerificationResult({\n        status: \"error\",\n        message:\n          language === \"en\"\n            ? \"Verification failed. Please try again.\"\n            : \"La verificación falló. Por favor intenta de nuevo.\",\n      });\n    } finally {\n      setIsVerifying(false);\n    }\n  };\n\n  const handleSubmit = () => {\n    const functionData: FunctionData = {\n      // If editing, include the original ID\n      ...(editFunction && editFunction.id && { id: editFunction.id }),\n      name: functionName,\n      description,\n      type: functionType,\n      ...(functionType === \"api\" && {\n        api: {\n          url: apiUrl,\n          method,\n          headers: headers.filter((h) => h.key && h.value),\n          parameters: parameters.filter((p) => p.name),\n          auth: requiresAuth ? { type: authType, value: authValue } : null,\n        },\n      }),\n      ...(functionType === \"custom\" && {\n        code: customCode,\n        credentials: customCredentials.filter((c) => c.name && c.value),\n      }),\n    };\n\n    if (editFunction && onEditFunction) {\n      onEditFunction(functionData);\n    } else {\n      onAddFunction(functionData);\n    }\n    onOpenChange(false);\n    // Form reset is now handled by the useEffect when onOpenChange(false) is called\n  };\n\n  const addHeader = () => {\n    setHeaders([...headers, { key: \"\", value: \"\" }]);\n  };\n  const removeHeader = (index: number) => {\n    setHeaders(headers.filter((_, i) => i !== index));\n  };\n  const updateHeader = (\n    index: number,\n    field: \"key\" | \"value\",\n    value: string\n  ) => {\n    const updatedHeaders = [...headers];\n    updatedHeaders[index][field] = value;\n    setHeaders(updatedHeaders);\n  };\n\n  const addParameter = () => {\n    setParameters([\n      ...parameters,\n      { name: \"\", type: \"string\", required: true, description: \"\" },\n    ]);\n  };\n  const removeParameter = (index: number) => {\n    setParameters(parameters.filter((_, i) => i !== index));\n  };\n  const updateParameter = (index: number, field: string, value: any) => {\n    const updatedParameters = [...parameters];\n    updatedParameters[index] = { ...updatedParameters[index], [field]: value };\n    setParameters(updatedParameters);\n  };\n\n  const addCustomCredential = () => {\n    setCustomCredentials([\n      ...customCredentials,\n      { name: \"\", value: \"\", description: \"\" },\n    ]);\n  };\n  const removeCustomCredential = (index: number) => {\n    setCustomCredentials(customCredentials.filter((_, i) => i !== index));\n    const newShowCredentials = { ...showCredentials };\n    delete newShowCredentials[index];\n    setShowCredentials(newShowCredentials);\n  };\n  const updateCustomCredential = (\n    index: number,\n    field: \"name\" | \"value\" | \"description\",\n    value: string\n  ) => {\n    const updatedCredentials = [...customCredentials];\n    updatedCredentials[index][field] = value;\n    setCustomCredentials(updatedCredentials);\n  };\n  const toggleCredentialVisibility = (index: number) => {\n    setShowCredentials((prev) => ({\n      ...prev,\n      [index]: !prev[index],\n    }));\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[700px] h-[80vh] flex flex-col\">\n        <DialogHeader className=\"flex-shrink-0\">\n          <DialogTitle>\n            {editFunction\n              ? language === \"en\"\n                ? \"Edit Custom Function\"\n                : \"Editar Función Personalizada\"\n              : language === \"en\"\n              ? \"Add Custom Function\"\n              : \"Agregar Función Personalizada\"}\n          </DialogTitle>\n          <DialogDescription>\n            {editFunction\n              ? language === \"en\"\n                ? \"Modify the details of your custom function\"\n                : \"Modifica los detalles de tu función personalizada\"\n              : language === \"en\"\n              ? \"Create a custom function that your bot can execute\"\n              : \"Crea una función personalizada que tu bot puede ejecutar\"}\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"flex-1 overflow-y-auto p-3\">\n          <div className=\"space-y-4\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"function-name\">\n                {language === \"en\" ? \"Function Name\" : \"Nombre de la Función\"}\n              </Label>\n              <Input\n                id=\"function-name\"\n                value={functionName}\n                onChange={(e) => setFunctionName(e.target.value)}\n                placeholder={\n                  language === \"en\" ? \"e.g., Send Email\" : \"ej., Enviar Email\"\n                }\n              />\n            </div>\n            <div className=\"space-y-2\">\n              {/*\n                NOTE: The original component uses the same `functionName` state and `id=\"function-name\"`\n                for both \"Function Name\" and \"Function Format\". This means only one value can be stored.\n                For a more robust solution, consider using a separate state variable and ID for \"Function Format\".\n              */}\n              <Label htmlFor=\"function-format\">\n                {language === \"en\"\n                  ? \"Write the function format: [FUNCTION:param1, param2, ...]\"\n                  : \"Escribe el formato de la función: [FUNCION:param1, param2, ...]\"}\n              </Label>\n              <Input\n                id=\"function-format\" // Changed ID to avoid conflict, though state is still shared\n                value={functionName} // Still using functionName as per original component\n                onChange={(e) => setFunctionName(e.target.value)}\n                placeholder={\n                  language === \"en\"\n                    ? \"e.g., [SEND_EMAIL:email, subject, message]\"\n                    : \"ej., [ENVIAR_CORREO:email, asunto, mensaje]\"\n                }\n              />\n            </div>\n            <SimpleAlert\n              message={\n                language === \"en\"\n                  ? \"The function must be written inside brackets like this: [FUNCTION:param1, param2, ...]. For example: [SEND_EMAIL:email, subject, message]\"\n                  : \"La función debe escribirse entre corchetes así: [FUNCION:param1, param2, ...]. Por ejemplo: [ENVIAR_CORREO:email, asunto, mensaje]\"\n              }\n            />\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"function-description\">\n                {language === \"en\" ? \"Description\" : \"Descripción\"}\n              </Label>\n              <Textarea\n                id=\"function-description\"\n                value={description}\n                onChange={(e) => setDescription(e.target.value)}\n                placeholder={\n                  language === \"en\"\n                    ? \"Describe what this function does...\"\n                    : \"Describe qué hace esta función...\"\n                }\n                className=\"min-h-[80px]\"\n              />\n            </div>\n            <Tabs value={functionType} onValueChange={setFunctionType}>\n              <TabsList className=\"grid w-full grid-cols-2\">\n                <TabsTrigger value=\"api\">API Call</TabsTrigger>\n                <TabsTrigger value=\"custom\">\n                  {language === \"en\" ? \"Custom Code\" : \"Código Personalizado\"}\n                </TabsTrigger>\n              </TabsList>\n              <TabsContent value=\"api\" className=\"space-y-4\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">\n                      {language === \"en\"\n                        ? \"API Configuration\"\n                        : \"Configuración de API\"}\n                    </CardTitle>\n                    <CardDescription>\n                      {language === \"en\"\n                        ? \"Configure the API endpoint that will be called\"\n                        : \"Configura el endpoint de API que será llamado\"}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"grid grid-cols-4 gap-2\">\n                      <div className=\"space-y-2\">\n                        <Label>{language === \"en\" ? \"Method\" : \"Método\"}</Label>\n                        <Select value={method} onValueChange={setMethod}>\n                          <SelectTrigger>\n                            <SelectValue />\n                          </SelectTrigger>\n                          <SelectContent>\n                            <SelectItem value=\"GET\">GET</SelectItem>\n                            <SelectItem value=\"POST\">POST</SelectItem>\n                            <SelectItem value=\"PUT\">PUT</SelectItem>\n                            <SelectItem value=\"DELETE\">DELETE</SelectItem>\n                            <SelectItem value=\"PATCH\">PATCH</SelectItem>\n                          </SelectContent>\n                        </Select>\n                      </div>\n                      <div className=\"col-span-3 space-y-2\">\n                        <Label htmlFor=\"api-url\">URL</Label>\n                        <Input\n                          id=\"api-url\"\n                          value={apiUrl}\n                          onChange={(e) => setApiUrl(e.target.value)}\n                          placeholder=\"https://api.example.com/endpoint\"\n                        />\n                      </div>\n                    </div>\n                    <div className=\"flex items-center space-x-2\">\n                      <Switch\n                        id=\"requires-auth\"\n                        checked={requiresAuth}\n                        onCheckedChange={setRequiresAuth}\n                      />\n                      <Label htmlFor=\"requires-auth\">\n                        {language === \"en\"\n                          ? \"Requires Authentication\"\n                          : \"Requiere Autenticación\"}\n                      </Label>\n                    </div>\n                    {requiresAuth && (\n                      <div className=\"grid grid-cols-3 gap-2\">\n                        <div className=\"space-y-2\">\n                          <Label>\n                            {language === \"en\" ? \"Auth Type\" : \"Tipo de Auth\"}\n                          </Label>\n                          <Select value={authType} onValueChange={setAuthType}>\n                            <SelectTrigger>\n                              <SelectValue />\n                            </SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"bearer\">\n                                Bearer Token\n                              </SelectItem>\n                              <SelectItem value=\"apikey\">API Key</SelectItem>\n                              <SelectItem value=\"basic\">Basic Auth</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"col-span-2 space-y-2\">\n                          <Label htmlFor=\"auth-value\">\n                            {language === \"en\" ? \"Auth Value\" : \"Valor de Auth\"}\n                          </Label>\n                          <Input\n                            id=\"auth-value\"\n                            type=\"password\"\n                            value={authValue}\n                            onChange={(e) => setAuthValue(e.target.value)}\n                            placeholder={\n                              language === \"en\"\n                                ? \"Enter token/key\"\n                                : \"Ingresa token/clave\"\n                            }\n                          />\n                        </div>\n                      </div>\n                    )}\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label>\n                          {language === \"en\" ? \"Headers\" : \"Encabezados\"}\n                        </Label>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={addHeader}\n                        >\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          {language === \"en\" ? \"Add Header\" : \"Agregar\"}\n                        </Button>\n                      </div>\n                      {headers.map((header, index) => (\n                        <div key={index} className=\"flex gap-2 items-center\">\n                          <Input\n                            placeholder={\n                              language === \"en\"\n                                ? \"Header name\"\n                                : \"Nombre del header\"\n                            }\n                            value={header.key}\n                            onChange={(e) =>\n                              updateHeader(index, \"key\", e.target.value)\n                            }\n                          />\n                          <Input\n                            placeholder={\n                              language === \"en\"\n                                ? \"Header value\"\n                                : \"Valor del header\"\n                            }\n                            value={header.value}\n                            onChange={(e) =>\n                              updateHeader(index, \"value\", e.target.value)\n                            }\n                          />\n                          <Button\n                            className=\"px-3 bg-transparent\"\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"icon\"\n                            onClick={() => removeHeader(index)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label>\n                          {language === \"en\" ? \"Parameters\" : \"Parámetros\"}\n                        </Label>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={addParameter}\n                        >\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          {language === \"en\" ? \"Add Parameter\" : \"Agregar\"}\n                        </Button>\n                      </div>\n                      {parameters.map((param, index) => (\n                        <div key={index} className=\"flex justify-between\">\n                          <div className=\"flex\">\n                            <div className=\"mr-2\">\n                              <Input\n                                placeholder={\n                                  language === \"en\"\n                                    ? \"Parameter name\"\n                                    : \"Nombre\"\n                                }\n                                value={param.name}\n                                onChange={(e) =>\n                                  updateParameter(index, \"name\", e.target.value)\n                                }\n                              />\n                            </div>\n                            <div className=\"col-span-2\">\n                              <Select\n                                value={param.type}\n                                onValueChange={(value) =>\n                                  updateParameter(index, \"type\", value)\n                                }\n                              >\n                                <SelectTrigger>\n                                  <SelectValue />\n                                </SelectTrigger>\n                                <SelectContent>\n                                  <SelectItem value=\"string\">String</SelectItem>\n                                  <SelectItem value=\"number\">Number</SelectItem>\n                                  <SelectItem value=\"boolean\">\n                                    Boolean\n                                  </SelectItem>\n                                  <SelectItem value=\"array\">Array</SelectItem>\n                                  <SelectItem value=\"object\">Object</SelectItem>\n                                </SelectContent>\n                              </Select>\n                            </div>\n                          </div>\n                          <div className=\"col-span-2 flex items-center gap-2\">\n                            <Switch\n                              checked={param.required}\n                              onCheckedChange={(checked) =>\n                                updateParameter(index, \"required\", checked)\n                              }\n                            />\n                            <span className=\"text-xs\">\n                              {language === \"en\" ? \"Required\" : \"Requerido\"}\n                            </span>\n                          </div>\n                          <div className=\"col-span-1\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"icon\"\n                              onClick={() => removeParameter(index)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n              <TabsContent value=\"custom\" className=\"space-y-4\">\n                {/* Security Credentials Section */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg flex items-center gap-2\">\n                      <Key className=\"h-5 w-5\" />\n                      {language === \"en\"\n                        ? \"Security Credentials\"\n                        : \"Credenciales de Seguridad\"}\n                    </CardTitle>\n                    <CardDescription>\n                      {language === \"en\"\n                        ? \"Add secure credentials that can be referenced in your code without exposing them\"\n                        : \"Agrega credenciales seguras que pueden ser referenciadas en tu código sin exponerlas\"}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"space-y-2\">\n                      <div className=\"flex items-center justify-between\">\n                        <Label>\n                          {language === \"en\" ? \"Credentials\" : \"Credenciales\"}\n                        </Label>\n                        <Button\n                          type=\"button\"\n                          variant=\"outline\"\n                          size=\"sm\"\n                          onClick={addCustomCredential}\n                        >\n                          <Plus className=\"h-4 w-4 mr-1\" />\n                          {language === \"en\" ? \"Add Credential\" : \"Agregar\"}\n                        </Button>\n                      </div>\n                      {customCredentials.map((credential, index) => (\n                        <div\n                          key={index}\n                          className=\"grid grid-cols-12 gap-2 items-end\"\n                        >\n                          <div className=\"col-span-3\">\n                            <Input\n                              placeholder={\n                                language === \"en\" ? \"Credential name\" : \"Nombre\"\n                              }\n                              value={credential.name}\n                              onChange={(e) =>\n                                updateCustomCredential(\n                                  index,\n                                  \"name\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </div>\n                          <div className=\"col-span-4 relative\">\n                            <Input\n                              type={\n                                showCredentials[index] ? \"text\" : \"password\"\n                              }\n                              placeholder={\n                                language === \"en\"\n                                  ? \"Token/API Key/Secret\"\n                                  : \"Token/API Key/Secreto\"\n                              }\n                              value={credential.value}\n                              onChange={(e) =>\n                                updateCustomCredential(\n                                  index,\n                                  \"value\",\n                                  e.target.value\n                                )\n                              }\n                              className=\"pr-10\"\n                            />\n                            <Button\n                              type=\"button\"\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"absolute right-0 top-0 h-full px-3\"\n                              onClick={() => toggleCredentialVisibility(index)}\n                            >\n                              {showCredentials[index] ? (\n                                <EyeOff className=\"h-4 w-4\" />\n                              ) : (\n                                <Eye className=\"h-4 w-4\" />\n                              )}\n                            </Button>\n                          </div>\n                          <div className=\"col-span-4\">\n                            <Input\n                              placeholder={\n                                language === \"en\"\n                                  ? \"Description\"\n                                  : \"Descripción\"\n                              }\n                              value={credential.description}\n                              onChange={(e) =>\n                                updateCustomCredential(\n                                  index,\n                                  \"description\",\n                                  e.target.value\n                                )\n                              }\n                            />\n                          </div>\n                          <div className=\"col-span-1\">\n                            <Button\n                              type=\"button\"\n                              variant=\"outline\"\n                              size=\"icon\"\n                              onClick={() => removeCustomCredential(index)}\n                            >\n                              <Trash2 className=\"h-4 w-4\" />\n                            </Button>\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                    {customCredentials.some((c) => c.name) && (\n                      <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-3\">\n                        <div className=\"flex items-center gap-2 text-blue-800 mb-2\">\n                          <Key className=\"h-4 w-4\" />\n                          <span className=\"font-medium text-sm\">\n                            {language === \"en\"\n                              ? \"How to use credentials in your code:\"\n                              : \"Cómo usar credenciales en tu código:\"}\n                          </span>\n                        </div>\n                        <div className=\"text-xs text-blue-700 font-mono bg-blue-100 p-2 rounded\">\n                          {customCredentials\n                            .filter((c) => c.name)\n                            .map(\n                              (c) => `const ${c.name} = credentials.${c.name};`\n                            )\n                            .join(\"\\n\") ||\n                            (language === \"en\"\n                              ? \"// Add credentials above to see examples\"\n                              : \"// Agrega credenciales arriba para ver ejemplos\")}\n                        </div>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n                {/* Custom Code Section */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"text-lg\">\n                      {language === \"en\"\n                        ? \"Custom Code\"\n                        : \"Código Personalizado\"}\n                    </CardTitle>\n                    <CardDescription>\n                      {language === \"en\"\n                        ? \"Write custom JavaScript code that will be executed\"\n                        : \"Escribe código JavaScript personalizado que será ejecutado\"}\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"space-y-4\">\n                      <div className=\"space-y-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <Label htmlFor=\"custom-code\">\n                            {language === \"en\"\n                              ? \"JavaScript Code\"\n                              : \"Código JavaScript\"}\n                          </Label>\n                          <Button\n                            type=\"button\"\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={handleVerifyFunction}\n                            disabled={isVerifying || !customCode.trim()}\n                            className=\"flex items-center gap-2 bg-transparent\"\n                          >\n                            {isVerifying ? (\n                              <Loader2 className=\"h-4 w-4 animate-spin\" />\n                            ) : (\n                              <Shield className=\"h-4 w-4\" />\n                            )}\n                            {isVerifying\n                              ? language === \"en\"\n                                ? \"Verifying...\"\n                                : \"Verificando...\"\n                              : language === \"en\"\n                              ? \"Verify Function\"\n                              : \"Verificar Función\"}\n                          </Button>\n                        </div>\n                        <Textarea\n                          id=\"custom-code\"\n                          value={customCode}\n                          onChange={(e) => setCustomCode(e.target.value)}\n                          placeholder={`// ${\n                            language === \"en\"\n                              ? \"Example function with credentials\"\n                              : \"Función de ejemplo con credenciales\"\n                          }\nfunction executeFunction(params, credentials) {\n  // ${\n    language === \"en\"\n      ? \"Access your secure credentials\"\n      : \"Accede a tus credenciales seguras\"\n  }\n  const apiKey = credentials.myApiKey;\n  const token = credentials.authToken;\n  \n  // ${\n    language === \"en\"\n      ? \"Your custom logic here\"\n      : \"Tu lógica personalizada aquí\"\n  }\n  console.log('Function executed with params:', params);\n  \n  // ${\n    language === \"en\" ? \"Make secure API calls\" : \"Realiza llamadas API seguras\"\n  }\n  const response = fetch('https://api.example.com/data', {\n    headers: {\n      'Authorization': \\`Bearer \\${token}\\`,\n      'X-API-Key': apiKey\n    }\n  });\n  \n  return { success: true, message: 'Function completed' };\n}`}\n                          className=\"min-h-[250px] font-mono text-sm\"\n                        />\n                      </div>\n                      {verificationResult && (\n                        <Alert\n                          className={`${\n                            verificationResult.status === \"success\"\n                              ? \"border-green-200 bg-green-50\"\n                              : verificationResult.status === \"warning\"\n                              ? \"border-yellow-200 bg-yellow-50\"\n                              : \"border-red-200 bg-red-50\"\n                          }`}\n                        >\n                          <div className=\"flex items-center gap-2\">\n                            {verificationResult.status === \"success\" && (\n                              <CheckCircle className=\"h-4 w-4 text-green-600\" />\n                            )}\n                            {verificationResult.status === \"warning\" && (\n                              <AlertTriangle className=\"h-4 w-4 text-yellow-600\" />\n                            )}\n                            {verificationResult.status === \"error\" && (\n                              <AlertTriangle className=\"h-4 w-4 text-red-600\" />\n                            )}\n                            <AlertDescription\n                              className={`${\n                                verificationResult.status === \"success\"\n                                  ? \"text-green-800\"\n                                  : verificationResult.status === \"warning\"\n                                  ? \"text-yellow-800\"\n                                  : \"text-red-800\"\n                              }`}\n                            >\n                              {verificationResult.message}\n                            </AlertDescription>\n                          </div>\n                        </Alert>\n                      )}\n                      <div className=\"mt-2 space-y-2\">\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {language === \"en\"\n                            ? \"Note: Code will be executed in a secure sandbox environment\"\n                            : \"Nota: El código se ejecutará en un entorno sandbox seguro\"}\n                        </Badge>\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {language === \"en\"\n                            ? \"Credentials are encrypted and never exposed in logs\"\n                            : \"Las credenciales están encriptadas y nunca se exponen en logs\"}\n                        </Badge>\n                      </div>\n                    </div>\n                  </CardContent>\n                </Card>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n        <div className=\"flex justify-end gap-2 pt-4 border-t flex-shrink-0\">\n          {functionType === \"custom\" && !verificationResult?.status && (\n            <div className=\"flex items-center text-xs text-amber-600 mr-auto\">\n              <AlertTriangle className=\"h-3 w-3 mr-1\" />\n              {language === \"en\"\n                ? \"Please verify your code before adding the function\"\n                : \"Por favor verifica tu código antes de agregar la función\"}\n            </div>\n          )}\n          {functionType === \"custom\" &&\n            verificationResult?.status === \"warning\" && (\n              <div className=\"flex items-center text-xs text-amber-600 mr-auto\">\n                <AlertTriangle className=\"h-3 w-3 mr-1\" />\n                {language === \"en\"\n                  ? \"Please fix the issues before adding the function\"\n                  : \"Por favor corrige los problemas antes de agregar la función\"}\n              </div>\n            )}\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            {language === \"en\" ? \"Cancel\" : \"Cancelar\"}\n          </Button>\n          <Button\n            onClick={handleSubmit}\n            disabled={\n              !functionName ||\n              !description ||\n              (functionType === \"custom\" &&\n                (!verificationResult ||\n                  verificationResult.status !== \"success\"))\n            }\n          >\n            {editFunction\n              ? language === \"en\"\n                ? \"Save Changes\"\n                : \"Guardar Cambios\"\n              : language === \"en\"\n              ? \"Add Function\"\n              : \"Agregar Función\"}\n          </Button>\n        </div>\n        {/* Verification Alert Dialog */}\n        {showVerificationAlert && (\n          <div className=\"fixed inset-0 bg-black/50 flex items-center justify-center z-50\">\n            <div className=\"bg-white rounded-lg p-6 max-w-md mx-4 space-y-4\">\n              <div className=\"flex items-center gap-3\">\n                <div className=\"p-2 bg-blue-100 rounded-full\">\n                  <Shield className=\"h-5 w-5 text-blue-600\" />\n                </div>\n                <div>\n                  <h3 className=\"font-semibold text-lg\">\n                    {language === \"en\"\n                      ? \"AI Code Verification\"\n                      : \"Verificación de Código con IA\"}\n                  </h3>\n                </div>\n              </div>\n              <div className=\"space-y-3 text-sm text-gray-600\">\n                <p>\n                  {language === \"en\"\n                    ? \"Your code will be analyzed by our AI security model to detect potential malicious code or security vulnerabilities.\"\n                    : \"Tu código será analizado por nuestro modelo de IA de seguridad para detectar posible código malicioso o vulnerabilidades de seguridad.\"}\n                </p>\n                <div className=\"bg-yellow-50 border border-yellow-200 rounded-lg p-3\">\n                  <div className=\"flex items-center gap-2 text-yellow-800\">\n                    <AlertTriangle className=\"h-4 w-4\" />\n                    <span className=\"font-medium\">\n                      {language === \"en\"\n                        ? \"Token Usage Notice\"\n                        : \"Aviso de Uso de Tokens\"}\n                    </span>\n                  </div>\n                  <p className=\"text-yellow-700 text-xs mt-1\">\n                    {language === \"en\"\n                      ? \"This verification will consume approximately 50-100 tokens from your account balance.\"\n                      : \"Esta verificación consumirá aproximadamente 50-100 tokens de tu saldo de cuenta.\"}\n                  </p>\n                </div>\n                <p className=\"text-xs\">\n                  {language === \"en\"\n                    ? \"The verification helps ensure your bot functions safely and securely.\"\n                    : \"La verificación ayuda a asegurar que tu bot funcione de manera segura.\"}\n                </p>\n              </div>\n              <div className=\"flex gap-2 pt-2\">\n                <Button\n                  variant=\"outline\"\n                  onClick={() => setShowVerificationAlert(false)}\n                  className=\"flex-1\"\n                >\n                  {language === \"en\" ? \"Cancel\" : \"Cancelar\"}\n                </Button>\n                <Button onClick={confirmVerification} className=\"flex-1\">\n                  {language === \"en\" ? \"Verify Code\" : \"Verificar Código\"}\n                </Button>\n              </div>\n            </div>\n          </div>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1770, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/components/functions/automatizaciones-admin.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport React, { JSX, useEffect, useMemo, useState } from \"react\";\r\nimport { useSession } from \"next-auth/react\";\r\nimport { Badge } from \"@/components/ui/badge\";\r\nimport { Button } from \"@/components/ui/button\";\r\nimport {\r\n  Card,\r\n  CardContent,\r\n  CardDescription,\r\n  CardHeader,\r\n  CardTitle,\r\n} from \"@/components/ui/card\";\r\nimport { Input } from \"@/components/ui/input\";\r\nimport { Label } from \"@/components/ui/label\";\r\nimport { Textarea } from \"@/components/ui/textarea\";\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from \"@/components/ui/select\";\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\r\nimport { Switch } from \"@/components/ui/switch\";\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogFooter,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from \"@/components/ui/dialog\";\r\nimport {\r\n  Accordion,\r\n  AccordionContent,\r\n  AccordionItem,\r\n  AccordionTrigger,\r\n} from \"@/components/ui/accordion\";\r\nimport {\r\n  AlertCircle,\r\n  Code,\r\n  Database,\r\n  Edit,\r\n  Forward,\r\n  Mail,\r\n  Pause,\r\n  Play,\r\n  Plus,\r\n  Reply,\r\n  Send,\r\n  Server,\r\n  Shield,\r\n  Terminal,\r\n  Trash2,\r\n  Webhook,\r\n  Zap,\r\n} from \"lucide-react\";\r\n// IMPORTANT: keep your store import as-is\r\nimport { useAutomatedTasksStore } from \"@/store/AutomatizedTaskStore\";\r\n\r\n/**\r\n * Tipos estrictos\r\n */\r\ninterface Client {\r\n  id: string;\r\n  name: string;\r\n  email: string;\r\n  company?: string;\r\n  customFields: Record<string, string>;\r\n  lastEmailSent?: string;\r\n  responseReceived?: boolean;\r\n  tags: string[];\r\n}\r\n\r\ninterface EmailTemplate {\r\n  id: string;\r\n  name: string;\r\n  subject: string;\r\n  body: string;\r\n  variables: string[];\r\n}\r\n\r\ntype CampaignStatus = \"draft\" | \"scheduled\" | \"sent\" | \"completed\";\r\n\r\ninterface EmailCampaign {\r\n  id: string;\r\n  name: string;\r\n  clients: Client[];\r\n  template: EmailTemplate;\r\n  scheduledTime: string;\r\n  timezone: string;\r\n  status: CampaignStatus;\r\n  sentCount: number;\r\n  responseCount: number;\r\n  autoReplyEnabled: boolean;\r\n  autoReplyTemplate?: EmailTemplate;\r\n}\r\n\r\ntype EmailProvider = \"gmail\" | \"outlook\" | \"smtp\" | \"imap\";\r\n\r\ninterface EmailConfig {\r\n  provider: EmailProvider;\r\n  smtpHost?: string;\r\n  smtpPort?: number;\r\n  imapHost?: string;\r\n  imapPort?: number;\r\n  username: string;\r\n  password: string;\r\n  useSSL: boolean;\r\n  monitorFolder?: string;\r\n}\r\n\r\ntype EmailFilterField = \"from\" | \"to\" | \"subject\" | \"body\" | \"attachment\";\r\ntype EmailFilterOp =\r\n  | \"contains\"\r\n  | \"equals\"\r\n  | \"starts_with\"\r\n  | \"ends_with\"\r\n  | \"regex\";\r\n\r\ninterface EmailFilter {\r\n  field: EmailFilterField;\r\n  operator: EmailFilterOp;\r\n  value: string;\r\n}\r\n\r\ntype TaskActionType =\r\n  | \"command\"\r\n  | \"api_call\"\r\n  | \"notification\"\r\n  | \"script\"\r\n  | \"email_reply\"\r\n  | \"email_send\"\r\n  | \"email_forward\"\r\n  | \"email_blast\";\r\n\r\ninterface TaskAction {\r\n  id: string;\r\n  type: TaskActionType;\r\n  name: string;\r\n  config: {\r\n    command?: string;\r\n    script?: string;\r\n    apiUrl?: string;\r\n    method?: string;\r\n    headers?: Record<string, string>;\r\n    body?: string;\r\n    notificationMessage?: string;\r\n    emailTemplate?: string;\r\n    emailTo?: string;\r\n    emailSubject?: string;\r\n    emailBody?: string;\r\n    replyTemplate?: string;\r\n    forwardTo?: string;\r\n    attachOriginal?: boolean;\r\n    campaign?: EmailCampaign;\r\n    delayBetweenEmails?: number;\r\n    trackOpens?: boolean;\r\n    trackClicks?: boolean;\r\n    [key: string]: unknown;\r\n  };\r\n}\r\n\r\ntype TaskTriggerType =\r\n  | \"webhook\"\r\n  | \"schedule\"\r\n  | \"api_monitor\"\r\n  | \"log_monitor\"\r\n  | \"email_received\"\r\n  | \"custom\"\r\n  | \"scheduled_email_blast\";\r\n\r\ninterface TaskTrigger {\r\n  type: TaskTriggerType;\r\n  config: {\r\n    webhookUrl?: string;\r\n    schedule?: string;\r\n    scheduledTime?: string;\r\n    apiUrl?: string;\r\n    logPath?: string;\r\n    condition?: string;\r\n    customTrigger?: string;\r\n    emailConfig?: EmailConfig;\r\n    emailFilters?: EmailFilter[];\r\n    checkInterval?: number;\r\n    timezone?: string;\r\n    [key: string]: unknown;\r\n  };\r\n}\r\n\r\ntype TaskCategory =\r\n  | \"server\"\r\n  | \"database\"\r\n  | \"security\"\r\n  | \"monitoring\"\r\n  | \"email\"\r\n  | \"custom\"\r\n  | \"marketing\";\r\n\r\ntype TaskStatus = \"active\" | \"inactive\" | \"error\";\r\n\r\ninterface AdvancedTask {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  category: TaskCategory;\r\n  prompt: string;\r\n  trigger: TaskTrigger;\r\n  conditions: {\r\n    field: string;\r\n    operator: \"equals\" | \"contains\" | \"greater_than\" | \"less_than\" | \"regex\";\r\n    value: string;\r\n  }[];\r\n  actions: TaskAction[];\r\n  variables: Record<string, string>;\r\n  emailTemplates?: EmailTemplate[];\r\n  status: TaskStatus;\r\n  lastRun?: string;\r\n  runCount: number;\r\n  emailCampaigns?: EmailCampaign[];\r\n}\r\n\r\n/**\r\n * UI catálogos\r\n */\r\nconst taskCategories: {\r\n  value: TaskCategory;\r\n  label: string;\r\n  icon: React.ComponentType<React.SVGProps<SVGSVGElement>>;\r\n  color: string;\r\n}[] = [\r\n  {\r\n    value: \"server\",\r\n    label: \"Administración de Servidor\",\r\n    icon: Server,\r\n    color: \"bg-blue-500\",\r\n  },\r\n  {\r\n    value: \"database\",\r\n    label: \"Base de Datos\",\r\n    icon: Database,\r\n    color: \"bg-green-500\",\r\n  },\r\n  { value: \"security\", label: \"Seguridad\", icon: Shield, color: \"bg-red-500\" },\r\n  {\r\n    value: \"monitoring\",\r\n    label: \"Monitoreo\",\r\n    icon: AlertCircle,\r\n    color: \"bg-yellow-500\",\r\n  },\r\n  {\r\n    value: \"email\",\r\n    label: \"Gestión de Email\",\r\n    icon: Mail,\r\n    color: \"bg-indigo-500\",\r\n  },\r\n  {\r\n    value: \"custom\",\r\n    label: \"Personalizada\",\r\n    icon: Zap,\r\n    color: \"bg-purple-500\",\r\n  },\r\n  {\r\n    value: \"marketing\",\r\n    label: \"Email Marketing\",\r\n    icon: Send,\r\n    color: \"bg-pink-500\",\r\n  },\r\n];\r\n\r\nconst triggerTypes: {\r\n  value: TaskTriggerType;\r\n  label: string;\r\n  description: string;\r\n}[] = [\r\n  {\r\n    value: \"webhook\",\r\n    label: \"Webhook\",\r\n    description: \"Recibe alertas via HTTP\",\r\n  },\r\n  {\r\n    value: \"schedule\",\r\n    label: \"Programado\",\r\n    description: \"Ejecuta en horarios específicos\",\r\n  },\r\n  {\r\n    value: \"api_monitor\",\r\n    label: \"Monitor API\",\r\n    description: \"Monitorea endpoints\",\r\n  },\r\n  {\r\n    value: \"log_monitor\",\r\n    label: \"Monitor de Logs\",\r\n    description: \"Analiza archivos de log\",\r\n  },\r\n  {\r\n    value: \"email_received\",\r\n    label: \"Email Recibido\",\r\n    description: \"Se activa al recibir emails\",\r\n  },\r\n  {\r\n    value: \"custom\",\r\n    label: \"Personalizado\",\r\n    description: \"Trigger personalizado\",\r\n  },\r\n  {\r\n    value: \"scheduled_email_blast\",\r\n    label: \"Envío Masivo Programado\",\r\n    description: \"Envía emails masivos a hora específica\",\r\n  },\r\n];\r\n\r\nconst actionTypes: {\r\n  value: TaskActionType;\r\n  label: string;\r\n  description: string;\r\n}[] = [\r\n  {\r\n    value: \"command\",\r\n    label: \"Comando del Sistema\",\r\n    description: \"Ejecuta comandos bash/shell\",\r\n  },\r\n  {\r\n    value: \"script\",\r\n    label: \"Script Personalizado\",\r\n    description: \"Ejecuta código personalizado\",\r\n  },\r\n  {\r\n    value: \"api_call\",\r\n    label: \"Llamada API\",\r\n    description: \"Realiza peticiones HTTP\",\r\n  },\r\n  {\r\n    value: \"notification\",\r\n    label: \"Notificación\",\r\n    description: \"Envía alertas/mensajes\",\r\n  },\r\n  {\r\n    value: \"email_reply\",\r\n    label: \"Responder Email\",\r\n    description: \"Responde automáticamente al email\",\r\n  },\r\n  {\r\n    value: \"email_send\",\r\n    label: \"Enviar Email\",\r\n    description: \"Envía un nuevo email\",\r\n  },\r\n  {\r\n    value: \"email_forward\",\r\n    label: \"Reenviar Email\",\r\n    description: \"Reenvía el email a otra dirección\",\r\n  },\r\n  {\r\n    value: \"email_blast\",\r\n    label: \"Envío Masivo\",\r\n    description: \"Envía emails personalizados a múltiples clientes\",\r\n  },\r\n];\r\n\r\nconst emailProviders = [\r\n  {\r\n    value: \"gmail\",\r\n    label: \"Gmail\",\r\n    smtpHost: \"smtp.gmail.com\",\r\n    smtpPort: 587,\r\n    imapHost: \"imap.gmail.com\",\r\n    imapPort: 993,\r\n  },\r\n  {\r\n    value: \"outlook\",\r\n    label: \"Outlook\",\r\n    smtpHost: \"smtp-mail.outlook.com\",\r\n    smtpPort: 587,\r\n    imapHost: \"outlook.office365.com\",\r\n    imapPort: 993,\r\n  },\r\n  {\r\n    value: \"smtp\",\r\n    label: \"SMTP Personalizado\",\r\n    smtpHost: \"\",\r\n    smtpPort: 587,\r\n    imapHost: \"\",\r\n    imapPort: 993,\r\n  },\r\n] as const;\r\n\r\n/**\r\n * Helpers\r\n */\r\nconst uid = () => crypto.randomUUID();\r\n\r\nconst defaultEmailTemplate = (): EmailTemplate => ({\r\n  id: uid(),\r\n  name: \"\",\r\n  subject: \"\",\r\n  body: \"\",\r\n  variables: [],\r\n});\r\n\r\nconst defaultClient = (): Client => ({\r\n  id: uid(),\r\n  name: \"\",\r\n  email: \"\",\r\n  company: \"\",\r\n  customFields: {},\r\n  tags: [],\r\n  responseReceived: false,\r\n});\r\n\r\nconst defaultCampaign = (): EmailCampaign => ({\r\n  id: uid(),\r\n  name: \"\",\r\n  clients: [],\r\n  template: defaultEmailTemplate(),\r\n  scheduledTime: \"\",\r\n  timezone: \"America/Mexico_City\",\r\n  status: \"draft\",\r\n  sentCount: 0,\r\n  responseCount: 0,\r\n  autoReplyEnabled: false,\r\n  autoReplyTemplate: defaultEmailTemplate(),\r\n});\r\n\r\n/**\r\n * Tipado local del store para tener estricto en este componente, sin cambiar tu store real\r\n */\r\ninterface AutomatedTasksStore {\r\n  tasks: AdvancedTask[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  getTasks: (userId: string) => Promise<void>;\r\n  createTask: (payload: Partial<AdvancedTask>) => Promise<{ success: boolean }>;\r\n  updateTask: (\r\n    taskId: string,\r\n    userId: string,\r\n    payload: Partial<AdvancedTask>\r\n  ) => Promise<{ success: boolean }>;\r\n  deleteTask: (taskId: string, userId: string) => Promise<void>;\r\n  toggleTaskStatus: (taskId: string, userId: string) => Promise<void>;\r\n}\r\n\r\n/**\r\n * Componente\r\n */\r\nexport default function AdvancedBotTasks(): JSX.Element {\r\n  const session = useSession();\r\n  const userId =\r\n    (\r\n      session?.data as unknown as {\r\n        binding_id?: string;\r\n        user?: { id?: string };\r\n      }\r\n    )?.binding_id ||\r\n    (session?.data as unknown as { user?: { id?: string } })?.user?.id ||\r\n    \"demo-user\";\r\n\r\n  const {\r\n    tasks: tasksFromStore,\r\n    loading,\r\n    error,\r\n    getTasks,\r\n    createTask,\r\n    updateTask,\r\n    deleteTask,\r\n    toggleTaskStatus,\r\n  } = useAutomatedTasksStore() as unknown as AutomatedTasksStore;\r\n\r\n  // Cargar tareas\r\n  useEffect(() => {\r\n    void getTasks(userId);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [userId]);\r\n\r\n  // Estado UI\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [editingTask, setEditingTask] = useState<AdvancedTask | null>(null);\r\n\r\n  const resetNewTask = (): AdvancedTask => ({\r\n    id: uid(),\r\n    name: \"\",\r\n    description: \"\",\r\n    category: \"server\",\r\n    prompt: \"\",\r\n    trigger: { type: \"webhook\", config: {} },\r\n    conditions: [],\r\n    actions: [],\r\n    variables: {},\r\n    emailTemplates: [],\r\n    status: \"inactive\",\r\n    runCount: 0,\r\n    emailCampaigns: [],\r\n  });\r\n\r\n  const [newTask, setNewTask] = useState<AdvancedTask>(resetNewTask);\r\n\r\n  // Data memoizada y con tipos\r\n  const tasks = useMemo<AdvancedTask[]>(\r\n    () => tasksFromStore ?? [],\r\n    [tasksFromStore]\r\n  );\r\n\r\n  /**\r\n   * Persistencia\r\n   */\r\n  const handleSaveTask = async (): Promise<void> => {\r\n    const payload: Partial<AdvancedTask> = {\r\n      name: newTask.name || \"\",\r\n      description: newTask.description || \"\",\r\n      category: newTask.category || \"server\",\r\n      prompt: newTask.prompt || \"\",\r\n      trigger: newTask.trigger || { type: \"webhook\", config: {} },\r\n      conditions: newTask.conditions || [],\r\n      actions: newTask.actions || [],\r\n      variables: newTask.variables || {},\r\n      emailTemplates: newTask.emailTemplates || [],\r\n      status: newTask.status || \"inactive\",\r\n      runCount: newTask.runCount ?? 0,\r\n      emailCampaigns: newTask.emailCampaigns || [],\r\n    };\r\n\r\n    const res = editingTask\r\n      ? await updateTask(editingTask.id, userId, payload)\r\n      : await createTask(payload);\r\n\r\n    if (res?.success) {\r\n      setIsDialogOpen(false);\r\n      setEditingTask(null);\r\n      setNewTask(resetNewTask());\r\n    }\r\n  };\r\n\r\n  const handleToggleStatus = async (taskId: string) => {\r\n    await toggleTaskStatus(taskId, userId);\r\n  };\r\n\r\n  const handleDeleteTask = async (taskId: string) => {\r\n    await deleteTask(taskId, userId);\r\n  };\r\n\r\n  /**\r\n   * Helpers de edición dentro del modal\r\n   */\r\n\r\n  const getCategoryInfo = (category: string) =>\r\n    taskCategories.find((c) => c.value === category) || taskCategories[0];\r\n\r\n  // Email filters\r\n  const addEmailFilter = () => {\r\n    const trigger: TaskTrigger = {\r\n      ...(newTask.trigger ?? { type: \"webhook\", config: {} }),\r\n    };\r\n    trigger.config = trigger.config ?? {};\r\n    const current = trigger.config.emailFilters ?? [];\r\n    trigger.config.emailFilters = [\r\n      ...current,\r\n      { field: \"subject\", operator: \"contains\", value: \"\" } as EmailFilter,\r\n    ];\r\n    setNewTask({ ...newTask, trigger });\r\n  };\r\n\r\n  const updateEmailFilter = <K extends keyof EmailFilter>(\r\n    index: number,\r\n    field: K,\r\n    value: EmailFilter[K]\r\n  ) => {\r\n    const trigger: TaskTrigger = {\r\n      ...(newTask.trigger ?? { type: \"webhook\", config: {} }),\r\n    };\r\n    const filters = [...(trigger.config.emailFilters ?? [])];\r\n    if (!filters[index]) return;\r\n    filters[index] = { ...filters[index], [field]: value };\r\n    trigger.config.emailFilters = filters;\r\n    setNewTask({ ...newTask, trigger });\r\n  };\r\n\r\n  const removeEmailFilter = (index: number) => {\r\n    const trigger: TaskTrigger = {\r\n      ...(newTask.trigger ?? { type: \"webhook\", config: {} }),\r\n    };\r\n    const filters = [...(trigger.config.emailFilters ?? [])];\r\n    filters.splice(index, 1);\r\n    trigger.config.emailFilters = filters;\r\n    setNewTask({ ...newTask, trigger });\r\n  };\r\n\r\n  // Email templates\r\n  const addEmailTemplate = () => {\r\n    setNewTask({\r\n      ...newTask,\r\n      emailTemplates: [\r\n        ...(newTask.emailTemplates ?? []),\r\n        defaultEmailTemplate(),\r\n      ],\r\n    });\r\n  };\r\n\r\n  const updateEmailTemplate = <K extends keyof EmailTemplate>(\r\n    index: number,\r\n    field: K,\r\n    value: EmailTemplate[K]\r\n  ) => {\r\n    const templates = [...(newTask.emailTemplates ?? [])];\r\n    if (!templates[index]) return;\r\n    templates[index] = { ...templates[index], [field]: value };\r\n    setNewTask({ ...newTask, emailTemplates: templates });\r\n  };\r\n\r\n  const removeEmailTemplate = (index: number) => {\r\n    const templates = [...(newTask.emailTemplates ?? [])];\r\n    templates.splice(index, 1);\r\n    setNewTask({ ...newTask, emailTemplates: templates });\r\n  };\r\n\r\n  // Conditions\r\n  const addCondition = () => {\r\n    setNewTask({\r\n      ...newTask,\r\n      conditions: [\r\n        ...(newTask.conditions ?? []),\r\n        { field: \"\", operator: \"equals\", value: \"\" },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const updateCondition = (\r\n    index: number,\r\n    field: keyof AdvancedTask[\"conditions\"][number],\r\n    value: string\r\n  ) => {\r\n    const conditions = [...(newTask.conditions ?? [])];\r\n    if (!conditions[index]) return;\r\n    conditions[index] = { ...conditions[index], [field]: value };\r\n    setNewTask({ ...newTask, conditions });\r\n  };\r\n\r\n  const removeCondition = (index: number) => {\r\n    const conditions = [...(newTask.conditions ?? [])];\r\n    conditions.splice(index, 1);\r\n    setNewTask({ ...newTask, conditions });\r\n  };\r\n\r\n  // Actions\r\n  const addAction = () => {\r\n    const newAction: TaskAction = {\r\n      id: uid(),\r\n      type: \"command\",\r\n      name: \"\",\r\n      config: {},\r\n    };\r\n    setNewTask({\r\n      ...newTask,\r\n      actions: [...(newTask.actions ?? []), newAction],\r\n    });\r\n  };\r\n\r\n  const ensureEmailBlastDefaults = (a: TaskAction): TaskAction => {\r\n    if (a.type !== \"email_blast\") return a;\r\n    const existing = a.config.campaign;\r\n    return {\r\n      ...a,\r\n      config: {\r\n        ...a.config,\r\n        campaign: existing ?? defaultCampaign(),\r\n      },\r\n    };\r\n  };\r\n\r\n  const updateAction = <K extends keyof TaskAction>(\r\n    index: number,\r\n    field: K,\r\n    value: TaskAction[K]\r\n  ) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    if (!actions[index]) return;\r\n\r\n    if (field === \"config\") {\r\n      const prev = actions[index];\r\n      const merged: TaskAction = {\r\n        ...prev,\r\n        config: { ...prev.config, ...(value as TaskAction[\"config\"]) },\r\n      };\r\n      actions[index] = ensureEmailBlastDefaults(merged);\r\n    } else if (field === \"type\") {\r\n      const next: TaskAction = ensureEmailBlastDefaults({\r\n        ...actions[index],\r\n        type: value as TaskActionType,\r\n      });\r\n      actions[index] = next;\r\n    } else {\r\n      actions[index] = { ...actions[index], [field]: value } as TaskAction;\r\n    }\r\n\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  const removeAction = (index: number) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    actions.splice(index, 1);\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  // Variables\r\n  const addVariable = (key: string, value: string) => {\r\n    setNewTask({\r\n      ...newTask,\r\n      variables: { ...(newTask.variables ?? {}), [key]: value },\r\n    });\r\n  };\r\n\r\n  const removeVariable = (key: string) => {\r\n    const variables = { ...(newTask.variables ?? {}) };\r\n    delete variables[key];\r\n    setNewTask({ ...newTask, variables });\r\n  };\r\n\r\n  // Email blast clients\r\n  const addClient = (actionIndex: number) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    if (!actions[actionIndex]) return;\r\n    const withDefaults = ensureEmailBlastDefaults(actions[actionIndex]);\r\n    const campaign = withDefaults.config.campaign!;\r\n    campaign.clients = [...(campaign.clients ?? []), defaultClient()];\r\n    withDefaults.config.campaign = campaign;\r\n    actions[actionIndex] = withDefaults;\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  const updateClient = <K extends keyof Client>(\r\n    actionIndex: number,\r\n    clientIndex: number,\r\n    field: K,\r\n    value: Client[K]\r\n  ) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    if (!actions[actionIndex]) return;\r\n    const a = ensureEmailBlastDefaults(actions[actionIndex]);\r\n    const campaign = a.config.campaign!;\r\n    const clients = [...(campaign.clients ?? [])];\r\n    if (!clients[clientIndex]) return;\r\n\r\n    if (field === \"customFields\") {\r\n      const incoming = value as Client[\"customFields\"];\r\n      clients[clientIndex] = {\r\n        ...clients[clientIndex],\r\n        customFields: {\r\n          ...(clients[clientIndex].customFields ?? {}),\r\n          ...incoming,\r\n        },\r\n      };\r\n    } else if (field === \"tags\") {\r\n      const incoming = String(value);\r\n      clients[clientIndex] = {\r\n        ...clients[clientIndex],\r\n        tags: incoming\r\n          .split(\",\")\r\n          .map((t) => t.trim())\r\n          .filter(Boolean),\r\n      };\r\n    } else {\r\n      clients[clientIndex] = { ...clients[clientIndex], [field]: value };\r\n    }\r\n\r\n    a.config.campaign = { ...campaign, clients };\r\n    actions[actionIndex] = a;\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  const removeClient = (actionIndex: number, clientIndex: number) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    if (!actions[actionIndex]) return;\r\n    const a = ensureEmailBlastDefaults(actions[actionIndex]);\r\n    const campaign = a.config.campaign!;\r\n    const clients = [...(campaign.clients ?? [])];\r\n    clients.splice(clientIndex, 1);\r\n    a.config.campaign = { ...campaign, clients };\r\n    actions[actionIndex] = a;\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  const addCustomField = (\r\n    actionIndex: number,\r\n    clientIndex: number,\r\n    key: string,\r\n    value: string\r\n  ) => {\r\n    const actions = [...(newTask.actions ?? [])];\r\n    if (!actions[actionIndex]) return;\r\n    const a = ensureEmailBlastDefaults(actions[actionIndex]);\r\n    const campaign = a.config.campaign!;\r\n    const clients = [...(campaign.clients ?? [])];\r\n    if (!clients[clientIndex]) return;\r\n    clients[clientIndex] = {\r\n      ...clients[clientIndex],\r\n      customFields: {\r\n        ...(clients[clientIndex].customFields ?? {}),\r\n        [key]: value,\r\n      },\r\n    };\r\n    a.config.campaign = { ...campaign, clients };\r\n    actions[actionIndex] = a;\r\n    setNewTask({ ...newTask, actions });\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-6 max-w-7xl mx-auto\">\r\n      <div className=\"flex justify-between items-center mb-6\">\r\n        <div>\r\n          <h1 className=\"text-3xl font-bold\">Tareas Automatizadas Avanzadas</h1>\r\n          <p className=\"text-muted-foreground mt-2\">\r\n            {\r\n              \"Configura tareas complejas con triggers, condiciones, acciones personalizadas y gestión de emails\"\r\n            }\r\n          </p>\r\n          {loading && (\r\n            <p className=\"text-xs text-muted-foreground mt-1\">\r\n              {\"Cargando tareas...\"}\r\n            </p>\r\n          )}\r\n          {error && (\r\n            <p className=\"text-xs text-red-600 mt-1\">{`Error: ${error}`}</p>\r\n          )}\r\n        </div>\r\n\r\n        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n          <DialogTrigger asChild>\r\n            <Button\r\n              onClick={() => {\r\n                setEditingTask(null);\r\n                setNewTask(resetNewTask());\r\n              }}\r\n            >\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              Nueva Tarea Avanzada\r\n            </Button>\r\n          </DialogTrigger>\r\n\r\n          <DialogContent className=\"max-w-5xl max-h-[90vh] overflow-y-auto\">\r\n            <DialogHeader>\r\n              <DialogTitle>\r\n                {editingTask ? \"Editar Tarea\" : \"Nueva Tarea Automatizada\"}\r\n              </DialogTitle>\r\n              <DialogDescription>\r\n                {\r\n                  \"Configura una tarea avanzada con triggers, condiciones, acciones personalizadas y gestión de emails\"\r\n                }\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n\r\n            <Tabs defaultValue=\"basic\" className=\"w-full\">\r\n              <TabsList className=\"grid w-full grid-cols-6\">\r\n                <TabsTrigger value=\"basic\">Básico</TabsTrigger>\r\n                <TabsTrigger value=\"trigger\">Trigger</TabsTrigger>\r\n                <TabsTrigger value=\"conditions\">Condiciones</TabsTrigger>\r\n                <TabsTrigger value=\"actions\">Acciones</TabsTrigger>\r\n                <TabsTrigger value=\"email\">Email</TabsTrigger>\r\n                <TabsTrigger value=\"variables\">Variables</TabsTrigger>\r\n              </TabsList>\r\n\r\n              {/* Básico */}\r\n              <TabsContent value=\"basic\" className=\"space-y-4\">\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div>\r\n                    <Label htmlFor=\"task-name\">Nombre de la Tarea</Label>\r\n                    <Input\r\n                      id=\"task-name\"\r\n                      placeholder=\"Ej: Respuesta automática de soporte\"\r\n                      value={newTask.name}\r\n                      onChange={(e) =>\r\n                        setNewTask({ ...newTask, name: e.target.value })\r\n                      }\r\n                    />\r\n                  </div>\r\n                  <div>\r\n                    <Label htmlFor=\"task-category\">Categoría</Label>\r\n                    <Select\r\n                      value={newTask.category}\r\n                      onValueChange={(value) =>\r\n                        setNewTask({\r\n                          ...newTask,\r\n                          category: value as TaskCategory,\r\n                        })\r\n                      }\r\n                    >\r\n                      <SelectTrigger>\r\n                        <SelectValue placeholder=\"Selecciona categoría\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {taskCategories.map((category) => {\r\n                          const Icon = category.icon;\r\n                          return (\r\n                            <SelectItem\r\n                              key={category.value}\r\n                              value={category.value}\r\n                            >\r\n                              <div className=\"flex items-center\">\r\n                                <Icon className=\"w-4 h-4 mr-2\" />\r\n                                {category.label}\r\n                              </div>\r\n                            </SelectItem>\r\n                          );\r\n                        })}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"task-description\">Descripción</Label>\r\n                  <Input\r\n                    id=\"task-description\"\r\n                    placeholder=\"Breve descripción de lo que hace esta tarea\"\r\n                    value={newTask.description}\r\n                    onChange={(e) =>\r\n                      setNewTask({ ...newTask, description: e.target.value })\r\n                    }\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"task-prompt\">Contexto/Prompt del Bot</Label>\r\n                  <Textarea\r\n                    id=\"task-prompt\"\r\n                    placeholder=\"Describe cómo debe comportarse el bot cuando se active esta tarea...\"\r\n                    value={newTask.prompt}\r\n                    onChange={(e) =>\r\n                      setNewTask({ ...newTask, prompt: e.target.value })\r\n                    }\r\n                    rows={6}\r\n                  />\r\n                </div>\r\n              </TabsContent>\r\n\r\n              {/* Trigger */}\r\n              <TabsContent value=\"trigger\" className=\"space-y-4\">\r\n                <div>\r\n                  <Label>Tipo de Trigger</Label>\r\n                  <Select\r\n                    value={newTask.trigger?.type ?? \"webhook\"}\r\n                    onValueChange={(value) =>\r\n                      setNewTask({\r\n                        ...newTask,\r\n                        trigger: {\r\n                          type: value as TaskTriggerType,\r\n                          config: {},\r\n                        },\r\n                      })\r\n                    }\r\n                  >\r\n                    <SelectTrigger>\r\n                      <SelectValue placeholder=\"Selecciona trigger\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {triggerTypes.map((t) => (\r\n                        <SelectItem key={t.value} value={t.value}>\r\n                          <div>\r\n                            <div className=\"font-medium\">{t.label}</div>\r\n                            <div className=\"text-xs text-muted-foreground\">\r\n                              {t.description}\r\n                            </div>\r\n                          </div>\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n\r\n                {newTask.trigger?.type === \"email_received\" && (\r\n                  <div className=\"space-y-4\">\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <CardTitle className=\"text-lg\">\r\n                          Configuración de Email\r\n                        </CardTitle>\r\n                      </CardHeader>\r\n                      <CardContent className=\"space-y-4\">\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div>\r\n                            <Label>Proveedor de Email</Label>\r\n                            <Select\r\n                              value={\r\n                                newTask.trigger.config.emailConfig?.provider ??\r\n                                \"gmail\"\r\n                              }\r\n                              onValueChange={(val) => {\r\n                                const provider = emailProviders.find(\r\n                                  (p) => p.value === val\r\n                                );\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      emailConfig: {\r\n                                        ...(newTask.trigger?.config\r\n                                          .emailConfig ?? {\r\n                                          username: \"\",\r\n                                          password: \"\",\r\n                                          useSSL: true,\r\n                                          monitorFolder: \"INBOX\",\r\n                                        }),\r\n                                        provider: val as EmailProvider,\r\n                                        smtpHost: provider?.smtpHost ?? \"\",\r\n                                        smtpPort: provider?.smtpPort ?? 587,\r\n                                        imapHost: provider?.imapHost ?? \"\",\r\n                                        imapPort: provider?.imapPort ?? 993,\r\n                                      },\r\n                                    },\r\n                                  },\r\n                                });\r\n                              }}\r\n                            >\r\n                              <SelectTrigger>\r\n                                <SelectValue placeholder=\"Selecciona proveedor\" />\r\n                              </SelectTrigger>\r\n                              <SelectContent>\r\n                                {emailProviders.map((p) => (\r\n                                  <SelectItem key={p.value} value={p.value}>\r\n                                    {p.label}\r\n                                  </SelectItem>\r\n                                ))}\r\n                              </SelectContent>\r\n                            </Select>\r\n                          </div>\r\n                          <div>\r\n                            <Label>Intervalo de Verificación (minutos)</Label>\r\n                            <Input\r\n                              type=\"number\"\r\n                              placeholder=\"5\"\r\n                              value={String(\r\n                                newTask.trigger.config.checkInterval ?? \"\"\r\n                              )}\r\n                              onChange={(e) =>\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      checkInterval: Number.isNaN(\r\n                                        parseInt(e.target.value)\r\n                                      )\r\n                                        ? 0\r\n                                        : parseInt(e.target.value),\r\n                                    },\r\n                                  },\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div>\r\n                            <Label>Usuario/Email</Label>\r\n                            <Input\r\n                              placeholder=\"usuario@ejemplo.com\"\r\n                              value={\r\n                                newTask.trigger.config.emailConfig?.username ??\r\n                                \"\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      emailConfig: {\r\n                                        ...(newTask.trigger?.config\r\n                                          .emailConfig ?? {\r\n                                          provider: \"gmail\",\r\n                                          useSSL: true,\r\n                                          monitorFolder: \"INBOX\",\r\n                                        }),\r\n                                        username: e.target.value,\r\n                                      } as EmailConfig,\r\n                                    },\r\n                                  },\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <Label>Contraseña/App Password</Label>\r\n                            <Input\r\n                              type=\"password\"\r\n                              placeholder=\"contraseña o app password\"\r\n                              value={\r\n                                newTask.trigger.config.emailConfig?.password ??\r\n                                \"\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      emailConfig: {\r\n                                        ...(newTask.trigger?.config\r\n                                          .emailConfig ?? {\r\n                                          provider: \"gmail\",\r\n                                          useSSL: true,\r\n                                          monitorFolder: \"INBOX\",\r\n                                        }),\r\n                                        password: e.target.value,\r\n                                      } as EmailConfig,\r\n                                    },\r\n                                  },\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"grid grid-cols-2 gap-4\">\r\n                          <div>\r\n                            <Label>Carpeta a Monitorear</Label>\r\n                            <Input\r\n                              placeholder=\"INBOX\"\r\n                              value={\r\n                                newTask.trigger.config.emailConfig\r\n                                  ?.monitorFolder ?? \"INBOX\"\r\n                              }\r\n                              onChange={(e) =>\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      emailConfig: {\r\n                                        ...(newTask.trigger?.config\r\n                                          .emailConfig ?? {\r\n                                          provider: \"gmail\",\r\n                                          useSSL: true,\r\n                                        }),\r\n                                        monitorFolder: e.target.value,\r\n                                      } as EmailConfig,\r\n                                    },\r\n                                  },\r\n                                })\r\n                              }\r\n                            />\r\n                          </div>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <Switch\r\n                              checked={\r\n                                newTask.trigger.config.emailConfig?.useSSL ??\r\n                                true\r\n                              }\r\n                              onCheckedChange={(checked) =>\r\n                                setNewTask({\r\n                                  ...newTask,\r\n                                  trigger: {\r\n                                    ...(newTask.trigger as TaskTrigger),\r\n                                    config: {\r\n                                      ...(newTask.trigger?.config ?? {}),\r\n                                      emailConfig: {\r\n                                        ...(newTask.trigger?.config\r\n                                          .emailConfig ?? {\r\n                                          provider: \"gmail\",\r\n                                          monitorFolder: \"INBOX\",\r\n                                        }),\r\n                                        useSSL: checked,\r\n                                      } as EmailConfig,\r\n                                    },\r\n                                  },\r\n                                })\r\n                              }\r\n                            />\r\n                            <Label>Usar SSL/TLS</Label>\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <div className=\"flex justify-between items-center\">\r\n                          <CardTitle className=\"text-lg\">\r\n                            Filtros de Email\r\n                          </CardTitle>\r\n                          <Button\r\n                            type=\"button\"\r\n                            variant=\"outline\"\r\n                            size=\"sm\"\r\n                            onClick={addEmailFilter}\r\n                          >\r\n                            <Plus className=\"w-4 h-4 mr-2\" />\r\n                            Agregar Filtro\r\n                          </Button>\r\n                        </div>\r\n                      </CardHeader>\r\n                      <CardContent className=\"space-y-3\">\r\n                        {(newTask.trigger.config.emailFilters ?? []).map(\r\n                          (filter, index) => (\r\n                            <div\r\n                              key={`filter-${index}`}\r\n                              className=\"grid grid-cols-4 gap-2 items-end\"\r\n                            >\r\n                              <div>\r\n                                <Label>Campo</Label>\r\n                                <Select\r\n                                  value={filter.field}\r\n                                  onValueChange={(val) =>\r\n                                    updateEmailFilter(\r\n                                      index,\r\n                                      \"field\",\r\n                                      val as EmailFilterField\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <SelectTrigger>\r\n                                    <SelectValue placeholder=\"Selecciona campo\" />\r\n                                  </SelectTrigger>\r\n                                  <SelectContent>\r\n                                    <SelectItem value=\"from\">\r\n                                      De (From)\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"to\">\r\n                                      Para (To)\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"subject\">\r\n                                      Asunto\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"body\">Cuerpo</SelectItem>\r\n                                    <SelectItem value=\"attachment\">\r\n                                      Adjunto\r\n                                    </SelectItem>\r\n                                  </SelectContent>\r\n                                </Select>\r\n                              </div>\r\n                              <div>\r\n                                <Label>Operador</Label>\r\n                                <Select\r\n                                  value={filter.operator}\r\n                                  onValueChange={(val) =>\r\n                                    updateEmailFilter(\r\n                                      index,\r\n                                      \"operator\",\r\n                                      val as EmailFilterOp\r\n                                    )\r\n                                  }\r\n                                >\r\n                                  <SelectTrigger>\r\n                                    <SelectValue placeholder=\"Selecciona operador\" />\r\n                                  </SelectTrigger>\r\n                                  <SelectContent>\r\n                                    <SelectItem value=\"contains\">\r\n                                      Contiene\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"equals\">\r\n                                      Igual a\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"starts_with\">\r\n                                      Empieza con\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"ends_with\">\r\n                                      Termina con\r\n                                    </SelectItem>\r\n                                    <SelectItem value=\"regex\">Regex</SelectItem>\r\n                                  </SelectContent>\r\n                                </Select>\r\n                              </div>\r\n                              <div>\r\n                                <Label>Valor</Label>\r\n                                <Input\r\n                                  placeholder=\"ej: soporte\"\r\n                                  value={filter.value}\r\n                                  onChange={(e) =>\r\n                                    updateEmailFilter(\r\n                                      index,\r\n                                      \"value\",\r\n                                      e.target.value\r\n                                    )\r\n                                  }\r\n                                />\r\n                              </div>\r\n                              <Button\r\n                                type=\"button\"\r\n                                variant=\"outline\"\r\n                                size=\"sm\"\r\n                                onClick={() => removeEmailFilter(index)}\r\n                              >\r\n                                <Trash2 className=\"w-4 h-4\" />\r\n                              </Button>\r\n                            </div>\r\n                          )\r\n                        )}\r\n                      </CardContent>\r\n                    </Card>\r\n                  </div>\r\n                )}\r\n\r\n                {newTask.trigger?.type === \"scheduled_email_blast\" && (\r\n                  <div className=\"space-y-4\">\r\n                    <div className=\"grid grid-cols-2 gap-4\">\r\n                      <div>\r\n                        <Label htmlFor=\"schedule-time\">Hora de Envío</Label>\r\n                        <Input\r\n                          id=\"schedule-time\"\r\n                          type=\"time\"\r\n                          value={newTask.trigger.config.scheduledTime ?? \"\"}\r\n                          onChange={(e) =>\r\n                            setNewTask({\r\n                              ...newTask,\r\n                              trigger: {\r\n                                ...(newTask.trigger as TaskTrigger),\r\n                                config: {\r\n                                  ...(newTask.trigger?.config ?? {}),\r\n                                  scheduledTime: e.target.value,\r\n                                },\r\n                              },\r\n                            })\r\n                          }\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label htmlFor=\"timezone\">Zona Horaria</Label>\r\n                        <Select\r\n                          value={\r\n                            newTask.trigger.config.timezone ??\r\n                            \"America/Mexico_City\"\r\n                          }\r\n                          onValueChange={(val) =>\r\n                            setNewTask({\r\n                              ...newTask,\r\n                              trigger: {\r\n                                ...(newTask.trigger as TaskTrigger),\r\n                                config: {\r\n                                  ...(newTask.trigger?.config ?? {}),\r\n                                  timezone: val,\r\n                                },\r\n                              },\r\n                            })\r\n                          }\r\n                        >\r\n                          <SelectTrigger>\r\n                            <SelectValue placeholder=\"Selecciona zona horaria\" />\r\n                          </SelectTrigger>\r\n                          <SelectContent>\r\n                            <SelectItem value=\"America/Mexico_City\">\r\n                              Ciudad de México\r\n                            </SelectItem>\r\n                            <SelectItem value=\"America/New_York\">\r\n                              Nueva York\r\n                            </SelectItem>\r\n                            <SelectItem value=\"America/Los_Angeles\">\r\n                              Los Ángeles\r\n                            </SelectItem>\r\n                            <SelectItem value=\"Europe/Madrid\">\r\n                              Madrid\r\n                            </SelectItem>\r\n                            <SelectItem value=\"Europe/London\">\r\n                              Londres\r\n                            </SelectItem>\r\n                          </SelectContent>\r\n                        </Select>\r\n                      </div>\r\n                    </div>\r\n                    <div>\r\n                      <Label htmlFor=\"schedule-cron\">Programación (Cron)</Label>\r\n                      <Input\r\n                        id=\"schedule-cron\"\r\n                        placeholder=\"0 9 * * 1 (Lunes a las 9 AM)\"\r\n                        value={String(newTask.trigger.config.schedule ?? \"\")}\r\n                        onChange={(e) =>\r\n                          setNewTask({\r\n                            ...newTask,\r\n                            trigger: {\r\n                              ...(newTask.trigger as TaskTrigger),\r\n                              config: {\r\n                                ...(newTask.trigger?.config ?? {}),\r\n                                schedule: e.target.value,\r\n                              },\r\n                            },\r\n                          })\r\n                        }\r\n                      />\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        {\r\n                          \"Formato: minuto hora día mes día_semana (0=domingo, 1=lunes, etc.)\"\r\n                        }\r\n                      </p>\r\n                    </div>\r\n                  </div>\r\n                )}\r\n              </TabsContent>\r\n\r\n              {/* Condiciones */}\r\n              <TabsContent value=\"conditions\" className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <Label>Condiciones para Activar la Tarea</Label>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={addCondition}\r\n                  >\r\n                    <Plus className=\"w-4 h-4 mr-2\" />\r\n                    Agregar Condición\r\n                  </Button>\r\n                </div>\r\n\r\n                {(newTask.conditions ?? []).map((condition, index) => (\r\n                  <Card key={`cond-${index}`}>\r\n                    <CardContent className=\"pt-4\">\r\n                      <div className=\"grid grid-cols-4 gap-2 items-end\">\r\n                        <div>\r\n                          <Label>Campo</Label>\r\n                          <Input\r\n                            placeholder=\"ej: email_subject\"\r\n                            value={condition.field}\r\n                            onChange={(e) =>\r\n                              updateCondition(index, \"field\", e.target.value)\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <Label>Operador</Label>\r\n                          <Select\r\n                            value={condition.operator}\r\n                            onValueChange={(val) =>\r\n                              updateCondition(\r\n                                index,\r\n                                \"operator\",\r\n                                val as typeof condition.operator\r\n                              )\r\n                            }\r\n                          >\r\n                            <SelectTrigger>\r\n                              <SelectValue placeholder=\"Selecciona operador\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              <SelectItem value=\"equals\">Igual a</SelectItem>\r\n                              <SelectItem value=\"contains\">Contiene</SelectItem>\r\n                              <SelectItem value=\"greater_than\">\r\n                                Mayor que\r\n                              </SelectItem>\r\n                              <SelectItem value=\"less_than\">\r\n                                Menor que\r\n                              </SelectItem>\r\n                              <SelectItem value=\"regex\">Regex</SelectItem>\r\n                            </SelectContent>\r\n                          </Select>\r\n                        </div>\r\n                        <div>\r\n                          <Label>Valor</Label>\r\n                          <Input\r\n                            placeholder=\"ej: urgente\"\r\n                            value={condition.value}\r\n                            onChange={(e) =>\r\n                              updateCondition(index, \"value\", e.target.value)\r\n                            }\r\n                          />\r\n                        </div>\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => removeCondition(index)}\r\n                        >\r\n                          <Trash2 className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </TabsContent>\r\n\r\n              {/* Acciones */}\r\n              <TabsContent value=\"actions\" className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <Label>Acciones a Ejecutar</Label>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={addAction}\r\n                  >\r\n                    <Plus className=\"w-4 h-4 mr-2\" />\r\n                    Agregar Acción\r\n                  </Button>\r\n                </div>\r\n\r\n                {(newTask.actions ?? []).map((action) => (\r\n                  <Card key={action.id}>\r\n                    <CardHeader className=\"pb-3\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <CardTitle className=\"text-sm\">Acción</CardTitle>\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            const index = (newTask.actions ?? []).findIndex(\r\n                              (a) => a.id === action.id\r\n                            );\r\n                            if (index >= 0) removeAction(index);\r\n                          }}\r\n                        >\r\n                          <Trash2 className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-3\">\r\n                      <div className=\"grid grid-cols-2 gap-3\">\r\n                        <div>\r\n                          <Label>Nombre de la Acción</Label>\r\n                          <Input\r\n                            placeholder=\"ej: Responder automáticamente\"\r\n                            value={action.name}\r\n                            onChange={(e) => {\r\n                              const idx = (newTask.actions ?? []).findIndex(\r\n                                (a) => a.id === action.id\r\n                              );\r\n                              updateAction(idx, \"name\", e.target.value);\r\n                            }}\r\n                          />\r\n                        </div>\r\n                        <div>\r\n                          <Label>Tipo de Acción</Label>\r\n                          <Select\r\n                            value={action.type}\r\n                            onValueChange={(val) => {\r\n                              const idx = (newTask.actions ?? []).findIndex(\r\n                                (a) => a.id === action.id\r\n                              );\r\n                              updateAction(idx, \"type\", val as TaskActionType);\r\n                            }}\r\n                          >\r\n                            <SelectTrigger>\r\n                              <SelectValue placeholder=\"Selecciona tipo\" />\r\n                            </SelectTrigger>\r\n                            <SelectContent>\r\n                              {actionTypes.map((t) => (\r\n                                <SelectItem key={t.value} value={t.value}>\r\n                                  <div>\r\n                                    <div className=\"font-medium\">{t.label}</div>\r\n                                    <div className=\"text-xs text-muted-foreground\">\r\n                                      {t.description}\r\n                                    </div>\r\n                                  </div>\r\n                                </SelectItem>\r\n                              ))}\r\n                            </SelectContent>\r\n                          </Select>\r\n                        </div>\r\n                      </div>\r\n\r\n                      {action.type === \"email_reply\" && (\r\n                        <div className=\"space-y-3\">\r\n                          <div>\r\n                            <Label>Asunto de la Respuesta</Label>\r\n                            <Input\r\n                              placeholder=\"Re: {{original_subject}}\"\r\n                              value={action.config.emailSubject ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  emailSubject: e.target.value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <Label>Cuerpo de la Respuesta</Label>\r\n                            <Textarea\r\n                              placeholder=\"Hola {{sender_name}}, gracias por tu email...\"\r\n                              value={action.config.emailBody ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  emailBody: e.target.value,\r\n                                });\r\n                              }}\r\n                              rows={4}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      {action.type === \"email_send\" && (\r\n                        <div className=\"space-y-3\">\r\n                          <div>\r\n                            <Label>Destinatarios (separados por coma)</Label>\r\n                            <Input\r\n                              placeholder=\"admin@empresa.com, soporte@empresa.com\"\r\n                              value={action.config.emailTo ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  emailTo: e.target.value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <Label>Asunto</Label>\r\n                            <Input\r\n                              placeholder=\"🚨 Alerta: {{alert_type}}\"\r\n                              value={action.config.emailSubject ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  emailSubject: e.target.value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div>\r\n                            <Label>Cuerpo del Email</Label>\r\n                            <Textarea\r\n                              placeholder=\"Se ha detectado un problema: {{problem_description}}\"\r\n                              value={action.config.emailBody ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  emailBody: e.target.value,\r\n                                });\r\n                              }}\r\n                              rows={4}\r\n                            />\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      {action.type === \"email_forward\" && (\r\n                        <div className=\"space-y-3\">\r\n                          <div>\r\n                            <Label>Reenviar a</Label>\r\n                            <Input\r\n                              placeholder=\"supervisor@empresa.com\"\r\n                              value={action.config.forwardTo ?? \"\"}\r\n                              onChange={(e) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  forwardTo: e.target.value,\r\n                                });\r\n                              }}\r\n                            />\r\n                          </div>\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <Switch\r\n                              checked={action.config.attachOriginal ?? false}\r\n                              onCheckedChange={(checked) => {\r\n                                const idx = (newTask.actions ?? []).findIndex(\r\n                                  (a) => a.id === action.id\r\n                                );\r\n                                updateAction(idx, \"config\", {\r\n                                  attachOriginal: checked,\r\n                                });\r\n                              }}\r\n                            />\r\n                            <Label>Adjuntar email original</Label>\r\n                          </div>\r\n                        </div>\r\n                      )}\r\n\r\n                      {action.type === \"command\" && (\r\n                        <div>\r\n                          <Label>Comando a Ejecutar</Label>\r\n                          <Textarea\r\n                            placeholder={\r\n                              \"#!/bin/bash\\n\" +\r\n                              \"echo 'Ejecutando script personalizado'\\n\" +\r\n                              \"# Tu código aquí\"\r\n                            }\r\n                            value={action.config.command ?? \"\"}\r\n                            onChange={(e) => {\r\n                              const idx = (newTask.actions ?? []).findIndex(\r\n                                (a) => a.id === action.id\r\n                              );\r\n                              updateAction(idx, \"config\", {\r\n                                command: e.target.value,\r\n                              });\r\n                            }}\r\n                            rows={2}\r\n                          />\r\n                        </div>\r\n                      )}\r\n\r\n                      {action.type === \"script\" && (\r\n                        <div>\r\n                          <Label>Script/Código</Label>\r\n                          <Textarea\r\n                            placeholder={\r\n                              \"#!/bin/bash\\n\" +\r\n                              \"echo 'Ejecutando script personalizado'\\n\" +\r\n                              \"# Tu código aquí\"\r\n                            }\r\n                            value={action.config.script ?? \"\"}\r\n                            onChange={(e) => {\r\n                              const idx = (newTask.actions ?? []).findIndex(\r\n                                (a) => a.id === action.id\r\n                              );\r\n                              updateAction(idx, \"config\", {\r\n                                script: e.target.value,\r\n                              });\r\n                            }}\r\n                            rows={4}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n\r\n                {/* UI adicional para email_blast, una sección por acción */}\r\n                {(newTask.actions ?? []).map((action, mainIndex) => (\r\n                  <React.Fragment key={`blast-${action.id}`}>\r\n                    {action.type === \"email_blast\" &&\r\n                      action.config.campaign && (\r\n                        <div className=\"space-y-4\">\r\n                          <div className=\"grid grid-cols-2 gap-3\">\r\n                            <div>\r\n                              <Label>Delay entre Emails (segundos)</Label>\r\n                              <Input\r\n                                type=\"number\"\r\n                                placeholder=\"30\"\r\n                                value={String(\r\n                                  action.config.delayBetweenEmails ?? \"\"\r\n                                )}\r\n                                onChange={(e) =>\r\n                                  updateAction(mainIndex, \"config\", {\r\n                                    delayBetweenEmails: Number.isNaN(\r\n                                      parseInt(e.target.value)\r\n                                    )\r\n                                      ? 0\r\n                                      : parseInt(e.target.value),\r\n                                  })\r\n                                }\r\n                              />\r\n                            </div>\r\n                            <div className=\"flex items-center space-x-2\">\r\n                              <Switch\r\n                                checked={action.config.trackOpens ?? false}\r\n                                onCheckedChange={(checked) =>\r\n                                  updateAction(mainIndex, \"config\", {\r\n                                    trackOpens: checked,\r\n                                  })\r\n                                }\r\n                              />\r\n                              <Label>Rastrear Aperturas</Label>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <Card>\r\n                            <CardHeader>\r\n                              <div className=\"flex justify-between items-center\">\r\n                                <CardTitle className=\"text-lg\">\r\n                                  Lista de Clientes\r\n                                </CardTitle>\r\n                                <Button\r\n                                  type=\"button\"\r\n                                  variant=\"outline\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => addClient(mainIndex)}\r\n                                >\r\n                                  <Plus className=\"w-4 h-4 mr-2\" />\r\n                                  Agregar Cliente\r\n                                </Button>\r\n                              </div>\r\n                            </CardHeader>\r\n                            <CardContent className=\"space-y-4\">\r\n                              {(action.config.campaign.clients ?? []).map(\r\n                                (client, clientIndex) => (\r\n                                  <Card key={client.id}>\r\n                                    <CardHeader className=\"pb-3\">\r\n                                      <div className=\"flex justify-between items-center\">\r\n                                        <CardTitle className=\"text-sm\">{`Cliente ${\r\n                                          clientIndex + 1\r\n                                        }`}</CardTitle>\r\n                                        <Button\r\n                                          type=\"button\"\r\n                                          variant=\"outline\"\r\n                                          size=\"sm\"\r\n                                          onClick={() =>\r\n                                            removeClient(mainIndex, clientIndex)\r\n                                          }\r\n                                        >\r\n                                          <Trash2 className=\"w-4 h-4\" />\r\n                                        </Button>\r\n                                      </div>\r\n                                    </CardHeader>\r\n                                    <CardContent className=\"space-y-3\">\r\n                                      <div className=\"grid grid-cols-3 gap-3\">\r\n                                        <div>\r\n                                          <Label>Nombre</Label>\r\n                                          <Input\r\n                                            placeholder=\"Juan Pérez\"\r\n                                            value={client.name}\r\n                                            onChange={(e) =>\r\n                                              updateClient(\r\n                                                mainIndex,\r\n                                                clientIndex,\r\n                                                \"name\",\r\n                                                e.target.value\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                        </div>\r\n                                        <div>\r\n                                          <Label>Email</Label>\r\n                                          <Input\r\n                                            placeholder=\"juan@empresa.com\"\r\n                                            value={client.email}\r\n                                            onChange={(e) =>\r\n                                              updateClient(\r\n                                                mainIndex,\r\n                                                clientIndex,\r\n                                                \"email\",\r\n                                                e.target.value\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                        </div>\r\n                                        <div>\r\n                                          <Label>Empresa</Label>\r\n                                          <Input\r\n                                            placeholder=\"Empresa ABC\"\r\n                                            value={client.company ?? \"\"}\r\n                                            onChange={(e) =>\r\n                                              updateClient(\r\n                                                mainIndex,\r\n                                                clientIndex,\r\n                                                \"company\",\r\n                                                e.target.value\r\n                                              )\r\n                                            }\r\n                                          />\r\n                                        </div>\r\n                                      </div>\r\n\r\n                                      <div>\r\n                                        <Label>Tags (separados por coma)</Label>\r\n                                        <Input\r\n                                          placeholder=\"premium, desarrollo, cliente_vip\"\r\n                                          value={(client.tags ?? []).join(\", \")}\r\n                                          onChange={(e) =>\r\n                                            updateClient(\r\n                                              mainIndex,\r\n                                              clientIndex,\r\n                                              \"tags\",\r\n                                              e.target\r\n                                                .value as unknown as Client[\"tags\"]\r\n                                            )\r\n                                          }\r\n                                        />\r\n                                      </div>\r\n\r\n                                      <div>\r\n                                        <Label>Campos Personalizados</Label>\r\n                                        <div className=\"space-y-2\">\r\n                                          {Object.entries(\r\n                                            client.customFields ?? {}\r\n                                          ).map(([key, value]) => (\r\n                                            <div\r\n                                              key={`${client.id}-${key}`}\r\n                                              className=\"flex gap-2\"\r\n                                            >\r\n                                              <Input\r\n                                                value={key}\r\n                                                readOnly\r\n                                                className=\"flex-1\"\r\n                                              />\r\n                                              <Input\r\n                                                value={value}\r\n                                                onChange={(e) =>\r\n                                                  addCustomField(\r\n                                                    mainIndex,\r\n                                                    clientIndex,\r\n                                                    key,\r\n                                                    e.target.value\r\n                                                  )\r\n                                                }\r\n                                                className=\"flex-1\"\r\n                                              />\r\n                                              <Button\r\n                                                type=\"button\"\r\n                                                variant=\"outline\"\r\n                                                size=\"sm\"\r\n                                                onClick={() => {\r\n                                                  const newFields = {\r\n                                                    ...(client.customFields ??\r\n                                                      {}),\r\n                                                  };\r\n                                                  delete newFields[key];\r\n                                                  updateClient(\r\n                                                    mainIndex,\r\n                                                    clientIndex,\r\n                                                    \"customFields\",\r\n                                                    newFields\r\n                                                  );\r\n                                                }}\r\n                                              >\r\n                                                <Trash2 className=\"w-4 h-4\" />\r\n                                              </Button>\r\n                                            </div>\r\n                                          ))}\r\n                                          <div className=\"flex gap-2\">\r\n                                            <Input\r\n                                              placeholder=\"campo\"\r\n                                              id={`new-field-key-${mainIndex}-${clientIndex}`}\r\n                                            />\r\n                                            <Input\r\n                                              placeholder=\"valor\"\r\n                                              id={`new-field-value-${mainIndex}-${clientIndex}`}\r\n                                            />\r\n                                            <Button\r\n                                              type=\"button\"\r\n                                              onClick={() => {\r\n                                                const keyInput =\r\n                                                  document.getElementById(\r\n                                                    `new-field-key-${mainIndex}-${clientIndex}`\r\n                                                  ) as HTMLInputElement | null;\r\n                                                const valueInput =\r\n                                                  document.getElementById(\r\n                                                    `new-field-value-${mainIndex}-${clientIndex}`\r\n                                                  ) as HTMLInputElement | null;\r\n                                                if (\r\n                                                  keyInput?.value &&\r\n                                                  valueInput?.value\r\n                                                ) {\r\n                                                  addCustomField(\r\n                                                    mainIndex,\r\n                                                    clientIndex,\r\n                                                    keyInput.value,\r\n                                                    valueInput.value\r\n                                                  );\r\n                                                  keyInput.value = \"\";\r\n                                                  valueInput.value = \"\";\r\n                                                }\r\n                                              }}\r\n                                            >\r\n                                              <Plus className=\"w-4 h-4\" />\r\n                                            </Button>\r\n                                          </div>\r\n                                        </div>\r\n                                      </div>\r\n                                    </CardContent>\r\n                                  </Card>\r\n                                )\r\n                              )}\r\n                            </CardContent>\r\n                          </Card>\r\n\r\n                          <Card>\r\n                            <CardHeader>\r\n                              <CardTitle className=\"text-lg\">\r\n                                Plantilla del Email\r\n                              </CardTitle>\r\n                            </CardHeader>\r\n                            <CardContent className=\"space-y-3\">\r\n                              <div>\r\n                                <Label>Asunto del Email</Label>\r\n                                <Input\r\n                                  placeholder=\"Actualización de tu proyecto {{proyecto}} - {{company}}\"\r\n                                  value={\r\n                                    action.config.campaign?.template.subject ??\r\n                                    \"\"\r\n                                  }\r\n                                  onChange={(e) => {\r\n                                    const actions = [\r\n                                      ...(newTask.actions ?? []),\r\n                                    ];\r\n                                    if (actions[mainIndex]?.config.campaign) {\r\n                                      actions[\r\n                                        mainIndex\r\n                                      ].config.campaign!.template = {\r\n                                        ...(actions[mainIndex].config.campaign!\r\n                                          .template ?? defaultEmailTemplate()),\r\n                                        subject: e.target.value,\r\n                                      };\r\n                                      setNewTask({ ...newTask, actions });\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </div>\r\n                              <div>\r\n                                <Label>Cuerpo del Email</Label>\r\n                                <Textarea\r\n                                  placeholder=\"Hola {{name}}, espero que tengas una excelente semana...\"\r\n                                  value={\r\n                                    action.config.campaign?.template.body ?? \"\"\r\n                                  }\r\n                                  onChange={(e) => {\r\n                                    const actions = [\r\n                                      ...(newTask.actions ?? []),\r\n                                    ];\r\n                                    if (actions[mainIndex]?.config.campaign) {\r\n                                      actions[\r\n                                        mainIndex\r\n                                      ].config.campaign!.template = {\r\n                                        ...(actions[mainIndex].config.campaign!\r\n                                          .template ?? defaultEmailTemplate()),\r\n                                        body: e.target.value,\r\n                                      };\r\n                                      setNewTask({ ...newTask, actions });\r\n                                    }\r\n                                  }}\r\n                                  rows={8}\r\n                                />\r\n                              </div>\r\n                            </CardContent>\r\n                          </Card>\r\n\r\n                          <div className=\"flex items-center space-x-2\">\r\n                            <Switch\r\n                              checked={\r\n                                action.config.campaign?.autoReplyEnabled ??\r\n                                false\r\n                              }\r\n                              onCheckedChange={(checked) => {\r\n                                const actions = [...(newTask.actions ?? [])];\r\n                                if (actions[mainIndex]?.config.campaign) {\r\n                                  actions[\r\n                                    mainIndex\r\n                                  ].config.campaign!.autoReplyEnabled = checked;\r\n                                  setNewTask({ ...newTask, actions });\r\n                                }\r\n                              }}\r\n                            />\r\n                            <Label>Habilitar Respuesta Automática</Label>\r\n                          </div>\r\n\r\n                          {action.config.campaign?.autoReplyEnabled && (\r\n                            <Card>\r\n                              <CardHeader>\r\n                                <CardTitle className=\"text-lg\">\r\n                                  Plantilla de Respuesta Automática\r\n                                </CardTitle>\r\n                              </CardHeader>\r\n                              <CardContent className=\"space-y-3\">\r\n                                <div>\r\n                                  <Label>Asunto de la Respuesta</Label>\r\n                                  <Input\r\n                                    placeholder=\"Re: {{original_subject}}\"\r\n                                    value={\r\n                                      action.config.campaign?.autoReplyTemplate\r\n                                        ?.subject ?? \"\"\r\n                                    }\r\n                                    onChange={(e) => {\r\n                                      const actions = [\r\n                                        ...(newTask.actions ?? []),\r\n                                      ];\r\n                                      if (actions[mainIndex]?.config.campaign) {\r\n                                        const tpl =\r\n                                          actions[mainIndex].config.campaign!\r\n                                            .autoReplyTemplate ??\r\n                                          defaultEmailTemplate();\r\n                                        actions[\r\n                                          mainIndex\r\n                                        ].config.campaign!.autoReplyTemplate = {\r\n                                          ...tpl,\r\n                                          subject: e.target.value,\r\n                                        };\r\n                                        setNewTask({ ...newTask, actions });\r\n                                      }\r\n                                    }}\r\n                                  />\r\n                                </div>\r\n                                <div>\r\n                                  <Label>Cuerpo de la Respuesta</Label>\r\n                                  <Textarea\r\n                                    placeholder=\"Hola {{name}}, gracias por tu respuesta sobre {{proyecto}}...\"\r\n                                    value={\r\n                                      action.config.campaign?.autoReplyTemplate\r\n                                        ?.body ?? \"\"\r\n                                    }\r\n                                    onChange={(e) => {\r\n                                      const actions = [\r\n                                        ...(newTask.actions ?? []),\r\n                                      ];\r\n                                      if (actions[mainIndex]?.config.campaign) {\r\n                                        const tpl =\r\n                                          actions[mainIndex].config.campaign!\r\n                                            .autoReplyTemplate ??\r\n                                          defaultEmailTemplate();\r\n                                        actions[\r\n                                          mainIndex\r\n                                        ].config.campaign!.autoReplyTemplate = {\r\n                                          ...tpl,\r\n                                          body: e.target.value,\r\n                                        };\r\n                                        setNewTask({ ...newTask, actions });\r\n                                      }\r\n                                    }}\r\n                                    rows={6}\r\n                                  />\r\n                                </div>\r\n                              </CardContent>\r\n                            </Card>\r\n                          )}\r\n                        </div>\r\n                      )}\r\n                  </React.Fragment>\r\n                ))}\r\n              </TabsContent>\r\n\r\n              {/* Email templates sueltos */}\r\n              <TabsContent value=\"email\" className=\"space-y-4\">\r\n                <div className=\"flex justify-between items-center\">\r\n                  <Label>Plantillas de Email</Label>\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={addEmailTemplate}\r\n                  >\r\n                    <Plus className=\"w-4 h-4 mr-2\" />\r\n                    Agregar Plantilla\r\n                  </Button>\r\n                </div>\r\n\r\n                {(newTask.emailTemplates ?? []).map((template) => (\r\n                  <Card key={template.id}>\r\n                    <CardHeader className=\"pb-3\">\r\n                      <div className=\"flex justify-between items-center\">\r\n                        <CardTitle className=\"text-sm\">Plantilla</CardTitle>\r\n                        <Button\r\n                          type=\"button\"\r\n                          variant=\"outline\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            const idx = (\r\n                              newTask.emailTemplates ?? []\r\n                            ).findIndex((t) => t.id === template.id);\r\n                            if (idx >= 0) removeEmailTemplate(idx);\r\n                          }}\r\n                        >\r\n                          <Trash2 className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-3\">\r\n                      <div>\r\n                        <Label>Nombre de la Plantilla</Label>\r\n                        <Input\r\n                          placeholder=\"ej: Plantilla de Soporte\"\r\n                          value={template.name}\r\n                          onChange={(e) => {\r\n                            const idx = (\r\n                              newTask.emailTemplates ?? []\r\n                            ).findIndex((t) => t.id === template.id);\r\n                            updateEmailTemplate(idx, \"name\", e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label>Asunto</Label>\r\n                        <Input\r\n                          placeholder=\"Re: {{original_subject}} - Respuesta Automática\"\r\n                          value={template.subject}\r\n                          onChange={(e) => {\r\n                            const idx = (\r\n                              newTask.emailTemplates ?? []\r\n                            ).findIndex((t) => t.id === template.id);\r\n                            updateEmailTemplate(idx, \"subject\", e.target.value);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label>Cuerpo del Email</Label>\r\n                        <Textarea\r\n                          placeholder={\r\n                            \"Hola {{sender_name}},\\n\\nGracias por contactarnos...\"\r\n                          }\r\n                          value={template.body}\r\n                          onChange={(e) => {\r\n                            const idx = (\r\n                              newTask.emailTemplates ?? []\r\n                            ).findIndex((t) => t.id === template.id);\r\n                            updateEmailTemplate(idx, \"body\", e.target.value);\r\n                          }}\r\n                          rows={6}\r\n                        />\r\n                      </div>\r\n                      <div>\r\n                        <Label>\r\n                          {\"Variables Disponibles (separadas por coma)\"}\r\n                        </Label>\r\n                        <Input\r\n                          placeholder=\"sender_name, original_subject, ai_analysis\"\r\n                          value={(template.variables ?? []).join(\", \")}\r\n                          onChange={(e) => {\r\n                            const idx = (\r\n                              newTask.emailTemplates ?? []\r\n                            ).findIndex((t) => t.id === template.id);\r\n                            updateEmailTemplate(\r\n                              idx,\r\n                              \"variables\",\r\n                              e.target.value\r\n                                .split(\",\")\r\n                                .map((v) => v.trim())\r\n                                .filter(Boolean)\r\n                            );\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                ))}\r\n              </TabsContent>\r\n\r\n              {/* Variables */}\r\n              <TabsContent value=\"variables\" className=\"space-y-4\">\r\n                <div>\r\n                  <Label>Variables Personalizadas</Label>\r\n                  <p className=\"text-sm text-muted-foreground mb-3\">\r\n                    {\r\n                      \"Define variables que puedes usar en tus comandos, emails y acciones usando {{variable_name}}\"\r\n                    }\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  {Object.entries(newTask.variables ?? {}).map(([k, v]) => (\r\n                    <div key={`var-${k}`} className=\"flex gap-2\">\r\n                      <Input value={k} readOnly className=\"flex-1\" />\r\n                      <Input\r\n                        value={v}\r\n                        onChange={(e) => addVariable(k, e.target.value)}\r\n                        className=\"flex-1\"\r\n                      />\r\n                      <Button\r\n                        type=\"button\"\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        onClick={() => removeVariable(k)}\r\n                      >\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n\r\n                <div className=\"flex gap-2\">\r\n                  <Input placeholder=\"nombre_variable\" id=\"new-var-key\" />\r\n                  <Input placeholder=\"valor\" id=\"new-var-value\" />\r\n                  <Button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      const keyInput = document.getElementById(\r\n                        \"new-var-key\"\r\n                      ) as HTMLInputElement | null;\r\n                      const valueInput = document.getElementById(\r\n                        \"new-var-value\"\r\n                      ) as HTMLInputElement | null;\r\n                      if (keyInput?.value && valueInput?.value) {\r\n                        addVariable(keyInput.value, valueInput.value);\r\n                        keyInput.value = \"\";\r\n                        valueInput.value = \"\";\r\n                      }\r\n                    }}\r\n                  >\r\n                    <Plus className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n\r\n                <div className=\"mt-6\">\r\n                  <Label className=\"text-sm font-medium\">\r\n                    Variables Comunes para Email Marketing:\r\n                  </Label>\r\n                  <div className=\"grid grid-cols-2 gap-2 mt-2 text-xs\">\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{name}}\"}</code> - Nombre del cliente\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{email}}\"}</code> - Email del cliente\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{company}}\"}</code> - Empresa del cliente\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{proyecto}}\"}</code> - Campo personalizado\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{estado}}\"}</code> - Campo personalizado\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{ai_personalized_content}}\"}</code> - Contenido\r\n                      generado por IA\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{timestamp}}\"}</code> - Fecha y hora actual\r\n                    </div>\r\n                    <div className=\"p-2 bg-muted rounded\">\r\n                      <code>{\"{{original_subject}}\"}</code> - Asunto original\r\n                      (respuestas)\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </TabsContent>\r\n            </Tabs>\r\n\r\n            <DialogFooter>\r\n              <Button variant=\"outline\" onClick={() => setIsDialogOpen(false)}>\r\n                Cancelar\r\n              </Button>\r\n              <Button onClick={handleSaveTask} disabled={loading}>\r\n                {editingTask ? \"Actualizar\" : \"Crear\"} Tarea\r\n              </Button>\r\n            </DialogFooter>\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n\r\n      {/* Listado de tareas */}\r\n      <div className=\"grid gap-6\">\r\n        {tasks.map((task) => {\r\n          const categoryInfo = getCategoryInfo(task.category);\r\n          const Icon = categoryInfo.icon;\r\n          return (\r\n            <Card key={task.id} className=\"relative\">\r\n              <CardHeader>\r\n                <div className=\"flex items-start justify-between\">\r\n                  <div className=\"flex items-center space-x-3\">\r\n                    <div className={`p-2 rounded-lg ${categoryInfo.color}`}>\r\n                      <Icon className=\"w-5 h-5 text-white\" />\r\n                    </div>\r\n                    <div>\r\n                      <CardTitle className=\"text-xl\">{task.name}</CardTitle>\r\n                      <CardDescription className=\"flex items-center space-x-2 mt-1\">\r\n                        <Badge variant=\"outline\">{categoryInfo.label}</Badge>\r\n                        <div\r\n                          className={`w-2 h-2 rounded-full ${\r\n                            task.status === \"active\"\r\n                              ? \"bg-green-500\"\r\n                              : task.status === \"error\"\r\n                              ? \"bg-red-500\"\r\n                              : \"bg-gray-500\"\r\n                          }`}\r\n                        />\r\n                        <span className=\"text-xs capitalize\">\r\n                          {task.status}\r\n                        </span>\r\n                        <span className=\"text-xs\">\r\n                          • {task.runCount ?? 0} ejecuciones\r\n                        </span>\r\n                      </CardDescription>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleToggleStatus(task.id)}\r\n                    >\r\n                      {task.status === \"active\" ? (\r\n                        <Pause className=\"w-4 h-4\" />\r\n                      ) : (\r\n                        <Play className=\"w-4 h-4\" />\r\n                      )}\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        setEditingTask(task);\r\n                        // Clonar para evitar mutar referencia original al editar\r\n                        setNewTask(\r\n                          JSON.parse(JSON.stringify(task)) as AdvancedTask\r\n                        );\r\n                        setIsDialogOpen(true);\r\n                      }}\r\n                    >\r\n                      <Edit className=\"w-4 h-4\" />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => handleDeleteTask(task.id)}\r\n                    >\r\n                      <Trash2 className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardHeader>\r\n\r\n              <CardContent>\r\n                <div className=\"space-y-4\">\r\n                  {task.description && (\r\n                    <p className=\"text-sm text-muted-foreground\">\r\n                      {task.description}\r\n                    </p>\r\n                  )}\r\n\r\n                  <Accordion type=\"single\" collapsible className=\"w-full\">\r\n                    <AccordionItem value=\"prompt\">\r\n                      <AccordionTrigger className=\"text-sm\">\r\n                        <div className=\"flex items-center\">\r\n                          <Code className=\"w-4 h-4 mr-2\" />\r\n                          Contexto del Bot\r\n                        </div>\r\n                      </AccordionTrigger>\r\n                      <AccordionContent>\r\n                        <div className=\"bg-muted p-3 rounded-md text-sm\">\r\n                          {task.prompt}\r\n                        </div>\r\n                      </AccordionContent>\r\n                    </AccordionItem>\r\n\r\n                    <AccordionItem value=\"trigger\">\r\n                      <AccordionTrigger className=\"text-sm\">\r\n                        <div className=\"flex items-center\">\r\n                          <Webhook className=\"w-4 h-4 mr-2\" />\r\n                          {\"Trigger: \"}\r\n                          {\r\n                            triggerTypes.find(\r\n                              (t) => t.value === task?.trigger?.type\r\n                            )?.label\r\n                          }\r\n                        </div>\r\n                      </AccordionTrigger>\r\n                      <AccordionContent>\r\n                        <div className=\"space-y-2 text-sm\">\r\n                          {task?.trigger?.type === \"email_received\" &&\r\n                            task?.trigger?.config?.emailConfig && (\r\n                              <div className=\"space-y-2\">\r\n                                <div className=\"flex justify-between\">\r\n                                  <span className=\"font-medium\">\r\n                                    Proveedor:\r\n                                  </span>\r\n                                  <span className=\"text-muted-foreground\">\r\n                                    {task.trigger.config.emailConfig.provider}\r\n                                  </span>\r\n                                </div>\r\n                                <div className=\"flex justify-between\">\r\n                                  <span className=\"font-medium\">Usuario:</span>\r\n                                  <span className=\"text-muted-foreground\">\r\n                                    {task.trigger.config.emailConfig.username}\r\n                                  </span>\r\n                                </div>\r\n                                <div className=\"flex justify-between\">\r\n                                  <span className=\"font-medium\">Carpeta:</span>\r\n                                  <span className=\"text-muted-foreground\">\r\n                                    {\r\n                                      task.trigger.config.emailConfig\r\n                                        .monitorFolder\r\n                                    }\r\n                                  </span>\r\n                                </div>\r\n\r\n                                {task.trigger.config.emailFilters &&\r\n                                  task.trigger.config.emailFilters.length >\r\n                                    0 && (\r\n                                    <div>\r\n                                      <span className=\"font-medium\">\r\n                                        Filtros:\r\n                                      </span>\r\n                                      <div className=\"mt-1 space-y-1\">\r\n                                        {task.trigger.config.emailFilters.map(\r\n                                          (filter, index) => (\r\n                                            <div\r\n                                              key={`${filter.field}-${index}`}\r\n                                              className=\"text-xs bg-muted p-2 rounded\"\r\n                                            >\r\n                                              {filter.field} {filter.operator} \"\r\n                                              {filter.value}\"\r\n                                            </div>\r\n                                          )\r\n                                        )}\r\n                                      </div>\r\n                                    </div>\r\n                                  )}\r\n                              </div>\r\n                            )}\r\n\r\n                          {Object.entries(task?.trigger?.config ?? {})\r\n                            .filter(\r\n                              ([key]) =>\r\n                                ![\"emailConfig\", \"emailFilters\"].includes(key)\r\n                            )\r\n                            .map(([k, v]) => (\r\n                              <div\r\n                                key={`tconf-${task.id}-${k}`}\r\n                                className=\"flex justify-between\"\r\n                              >\r\n                                <span className=\"font-medium\">{k}:</span>\r\n                                <span className=\"text-muted-foreground\">\r\n                                  {String(v)}\r\n                                </span>\r\n                              </div>\r\n                            ))}\r\n                        </div>\r\n                      </AccordionContent>\r\n                    </AccordionItem>\r\n\r\n                    <AccordionItem value=\"actions\">\r\n                      <AccordionTrigger className=\"text-sm\">\r\n                        <div className=\"flex items-center\">\r\n                          <Terminal className=\"w-4 h-4 mr-2\" />\r\n                          {`Acciones (${task.actions?.length ?? 0})`}\r\n                        </div>\r\n                      </AccordionTrigger>\r\n                      <AccordionContent>\r\n                        <div className=\"space-y-3\">\r\n                          {(task.actions ?? []).map((action) => {\r\n                            const actionType = actionTypes.find(\r\n                              (t) => t.value === action.type\r\n                            );\r\n                            const getActionIcon = () => {\r\n                              switch (action.type) {\r\n                                case \"email_reply\":\r\n                                  return Reply;\r\n                                case \"email_send\":\r\n                                  return Send;\r\n                                case \"email_forward\":\r\n                                  return Forward;\r\n                                case \"email_blast\":\r\n                                  return Mail;\r\n                                default:\r\n                                  return Terminal;\r\n                              }\r\n                            };\r\n                            const ActionIcon = getActionIcon();\r\n\r\n                            return (\r\n                              <div\r\n                                key={action.id}\r\n                                className=\"border rounded-md p-3\"\r\n                              >\r\n                                <div className=\"flex items-center justify-between mb-2\">\r\n                                  <div className=\"flex items-center space-x-2\">\r\n                                    <ActionIcon className=\"w-4 h-4\" />\r\n                                    <span className=\"font-medium text-sm\">\r\n                                      {action.name || \"(Sin nombre)\"}\r\n                                    </span>\r\n                                  </div>\r\n                                  <Badge variant=\"secondary\">\r\n                                    {actionType?.label}\r\n                                  </Badge>\r\n                                </div>\r\n\r\n                                {action.type === \"email_blast\" &&\r\n                                  action.config.campaign && (\r\n                                    <div className=\"space-y-2\">\r\n                                      <div className=\"grid grid-cols-2 gap-4 text-xs\">\r\n                                        <div>\r\n                                          <strong>Clientes:</strong>{\" \"}\r\n                                          {\r\n                                            action.config.campaign.clients\r\n                                              .length\r\n                                          }\r\n                                        </div>\r\n                                        <div>\r\n                                          <strong>Enviados:</strong>{\" \"}\r\n                                          {action.config.campaign.sentCount}\r\n                                        </div>\r\n                                        <div>\r\n                                          <strong>Respuestas:</strong>{\" \"}\r\n                                          {action.config.campaign.responseCount}\r\n                                        </div>\r\n                                        <div>\r\n                                          <strong>Estado:</strong>\r\n                                          <Badge\r\n                                            variant={\r\n                                              action.config.campaign.status ===\r\n                                              \"sent\"\r\n                                                ? \"default\"\r\n                                                : \"secondary\"\r\n                                            }\r\n                                            className=\"ml-1\"\r\n                                          >\r\n                                            {action.config.campaign.status}\r\n                                          </Badge>\r\n                                        </div>\r\n                                      </div>\r\n\r\n                                      <div className=\"text-xs\">\r\n                                        <strong>Asunto:</strong>{\" \"}\r\n                                        {\r\n                                          action.config.campaign.template\r\n                                            .subject\r\n                                        }\r\n                                      </div>\r\n\r\n                                      <details className=\"text-xs\">\r\n                                        <summary className=\"cursor-pointer font-medium\">\r\n                                          {`Ver clientes (${action.config.campaign.clients.length})`}\r\n                                        </summary>\r\n                                        <div className=\"mt-2 space-y-1 max-h-32 overflow-y-auto\">\r\n                                          {action.config.campaign.clients.map(\r\n                                            (client) => (\r\n                                              <div\r\n                                                key={client.id}\r\n                                                className=\"flex justify-between p-1 bg-muted rounded\"\r\n                                              >\r\n                                                <span>{client.name}</span>\r\n                                                <span className=\"text-muted-foreground\">\r\n                                                  {client.email}\r\n                                                </span>\r\n                                                {client.responseReceived && (\r\n                                                  <Badge\r\n                                                    variant=\"outline\"\r\n                                                    className=\"text-xs\"\r\n                                                  >\r\n                                                    Respondió\r\n                                                  </Badge>\r\n                                                )}\r\n                                              </div>\r\n                                            )\r\n                                          )}\r\n                                        </div>\r\n                                      </details>\r\n\r\n                                      {action.config.campaign\r\n                                        .autoReplyEnabled && (\r\n                                        <div className=\"text-xs text-green-600\">\r\n                                          {\"✓ Respuesta automática habilitada\"}\r\n                                        </div>\r\n                                      )}\r\n                                    </div>\r\n                                  )}\r\n\r\n                                {action.config.emailSubject && (\r\n                                  <div className=\"text-xs text-muted-foreground mb-1\">\r\n                                    <strong>Asunto:</strong>{\" \"}\r\n                                    {action.config.emailSubject}\r\n                                  </div>\r\n                                )}\r\n\r\n                                {action.config.emailBody && (\r\n                                  <code className=\"text-xs bg-muted p-2 rounded block whitespace-pre-wrap\">\r\n                                    {action.config.emailBody.slice(0, 200)}\r\n                                    {(action.config.emailBody?.length ?? 0) >\r\n                                    200\r\n                                      ? \"...\"\r\n                                      : \"\"}\r\n                                  </code>\r\n                                )}\r\n\r\n                                {action.config.command && (\r\n                                  <code className=\"text-xs bg-muted p-2 rounded block\">\r\n                                    {action.config.command}\r\n                                  </code>\r\n                                )}\r\n\r\n                                {action.config.script && (\r\n                                  <code className=\"text-xs bg-muted p-2 rounded block whitespace-pre-wrap\">\r\n                                    {action.config.script.slice(0, 200)}\r\n                                    {(action.config.script?.length ?? 0) > 200\r\n                                      ? \"...\"\r\n                                      : \"\"}\r\n                                  </code>\r\n                                )}\r\n                              </div>\r\n                            );\r\n                          })}\r\n                        </div>\r\n                      </AccordionContent>\r\n                    </AccordionItem>\r\n\r\n                    {task.emailTemplates && task.emailTemplates.length > 0 && (\r\n                      <AccordionItem value=\"email-templates\">\r\n                        <AccordionTrigger className=\"text-sm\">\r\n                          <div className=\"flex items-center\">\r\n                            <Mail className=\"w-4 h-4 mr-2\" />\r\n                            {`Plantillas de Email (${task.emailTemplates.length})`}\r\n                          </div>\r\n                        </AccordionTrigger>\r\n                        <AccordionContent>\r\n                          <div className=\"space-y-3\">\r\n                            {task.emailTemplates.map((template) => (\r\n                              <div\r\n                                key={`${task.id}-${template.id}`}\r\n                                className=\"border rounded-md p-3\"\r\n                              >\r\n                                <div className=\"font-medium text-sm mb-2\">\r\n                                  {template.name}\r\n                                </div>\r\n                                <div className=\"text-xs text-muted-foreground mb-1\">\r\n                                  <strong>Asunto:</strong> {template.subject}\r\n                                </div>\r\n                                <code className=\"text-xs bg-muted p-2 rounded block whitespace-pre-wrap\">\r\n                                  {template.body.slice(0, 150)}\r\n                                  {(template.body?.length ?? 0) > 150\r\n                                    ? \"...\"\r\n                                    : \"\"}\r\n                                </code>\r\n                                {(template.variables?.length ?? 0) > 0 && (\r\n                                  <div className=\"mt-2 text-xs\">\r\n                                    <strong>Variables:</strong>{\" \"}\r\n                                    {(template.variables ?? []).join(\", \")}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n                            ))}\r\n                          </div>\r\n                        </AccordionContent>\r\n                      </AccordionItem>\r\n                    )}\r\n\r\n                    {task.variables &&\r\n                      Object.keys(task.variables).length > 0 && (\r\n                        <AccordionItem value=\"variables\">\r\n                          <AccordionTrigger className=\"text-sm\">\r\n                            <div className=\"flex items-center\">\r\n                              <Zap className=\"w-4 h-4 mr-2\" />\r\n                              {`Variables (${\r\n                                Object.keys(task.variables).length\r\n                              })`}\r\n                            </div>\r\n                          </AccordionTrigger>\r\n                          <AccordionContent>\r\n                            <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                              {Object.entries(task.variables).map(\r\n                                ([varKey, value]) => (\r\n                                  <div\r\n                                    key={`${task.id}-${varKey}`}\r\n                                    className=\"flex justify-between p-2 bg-muted rounded\"\r\n                                  >\r\n                                    <span className=\"font-medium\">{`{{${varKey}}}`}</span>\r\n                                    <span className=\"text-muted-foreground\">\r\n                                      {String(value)}\r\n                                    </span>\r\n                                  </div>\r\n                                )\r\n                              )}\r\n                            </div>\r\n                          </AccordionContent>\r\n                        </AccordionItem>\r\n                      )}\r\n                  </Accordion>\r\n\r\n                  {task.lastRun && (\r\n                    <div className=\"text-xs text-muted-foreground\">{`Última ejecución: ${task.lastRun}`}</div>\r\n                  )}\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          );\r\n        })}\r\n\r\n        {tasks.length === 0 && !loading && (\r\n          <Card className=\"text-center py-12\">\r\n            <CardContent>\r\n              <Mail className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\r\n              <h3 className=\"text-lg font-medium mb-2\">\r\n                No hay tareas configuradas\r\n              </h3>\r\n              <p className=\"text-muted-foreground mb-4\">\r\n                {\r\n                  \"Crea tu primera tarea automatizada con gestión de emails, triggers y acciones personalizadas\"\r\n                }\r\n              </p>\r\n              <Button\r\n                onClick={() => {\r\n                  setEditingTask(null);\r\n                  setNewTask(resetNewTask());\r\n                  setIsDialogOpen(true);\r\n                }}\r\n              >\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                Crear Primera Tarea\r\n              </Button>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}