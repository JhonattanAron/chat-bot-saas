{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/store/chatAsistantStore.ts"],"sourcesContent":["import { APIResponse } from \"@/interfaces/api-response-interface\";\r\nimport { create } from \"zustand\";\r\n\r\ninterface FAQ {\r\n  _id?: string;\r\n  question: string;\r\n  answer: string;\r\n  category: string;\r\n}\r\n\r\nexport interface ChatAssistant {\r\n  _id?: string;\r\n  user_id: string;\r\n  name: string;\r\n  description: string;\r\n  funciones?: [];\r\n  type: string;\r\n  status: string;\r\n  use_case: string;\r\n  welcome_message: string;\r\n  faqs: FAQ[];\r\n}\r\n\r\ninterface ChatAssistantStore {\r\n  assistants: ChatAssistant[];\r\n  assistant?: ChatAssistant;\r\n  loading: boolean;\r\n  error: string | null;\r\n  createAssistant: (assistant: ChatAssistant) => Promise<APIResponse>;\r\n  updateAssistant: (assistant: ChatAssistant) => Promise<void>;\r\n  createFaq: (faqData: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqs: FAQ[];\r\n  }) => Promise<void>;\r\n  updateFaq: (faqUpdate: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n    update: Partial<FAQ>;\r\n  }) => Promise<void>;\r\n  deleteFaq: (params: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n  }) => Promise<void>;\r\n  getAssistants: (user_id: string) => Promise<ChatAssistant[]>;\r\n  getAssistantById: (\r\n    chat_id: string,\r\n    user_id: string\r\n  ) => Promise<ChatAssistant | undefined>;\r\n  deleteAssistant: (id: string) => Promise<void>;\r\n  setAssistants: (assistants: ChatAssistant[]) => void;\r\n  setError: (error: string | null) => void;\r\n}\r\n\r\nexport const useChatAssistantStore = create<ChatAssistantStore>((set, get) => ({\r\n  assistants: [],\r\n  loading: false,\r\n  error: null,\r\n\r\n  setAssistants: (assistants) => set({ assistants }),\r\n  setError: (error) => set({ error }),\r\n  createFaq: async (faqData: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqs: FAQ[];\r\n  }) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/faq-tasks\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(faqData),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error creating FAQ\");\r\n      // Opcional: actualizar el estado local si lo necesitas\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateFaq: async (faqUpdate: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n    update: Partial<FAQ>;\r\n  }) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/faq-tasks\", {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(faqUpdate),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error updating FAQ\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  deleteFaq: async (params: {\r\n    user_id: string;\r\n    assistant_id: string;\r\n    faqId: string;\r\n  }) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const query = new URLSearchParams(\r\n        params as Record<string, string>\r\n      ).toString();\r\n      const res = await fetch(`/api/faq-tasks?${query}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error deleting FAQ\");\r\n      set({ loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  getAssistants: async (user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(`/api/asistant-tasks?user_id=${user_id}`);\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching assistants\");\r\n      set({ assistants: data, loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      return [];\r\n    }\r\n  },\r\n  getAssistantById: async (chat_id, user_id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\r\n        `/api/asistant-get?chat_id=${chat_id}&user_id=${user_id}`\r\n      );\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error fetching assistants\");\r\n      set({ assistant: data, loading: false });\r\n      return data;\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      return [];\r\n    }\r\n  },\r\n\r\n  createAssistant: async (assistant) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({\r\n          user_id: assistant.user_id,\r\n          name: assistant.name,\r\n          description: assistant.description,\r\n          funciones: assistant.funciones,\r\n          type: assistant.type,\r\n          status: assistant.status,\r\n          use_case: assistant.use_case,\r\n          welcome_message: assistant.welcome_message,\r\n        }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) {\r\n        return { data, error: true, local: assistant };\r\n      } else {\r\n        set((state) => ({\r\n          assistants: [...state.assistants, data],\r\n          loading: false,\r\n        }));\r\n        return { data, error: false };\r\n      }\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n      throw err;\r\n    }\r\n  },\r\n\r\n  updateAssistant: async (assistant) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"PATCH\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(assistant),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error updating assistant\");\r\n      set((state) => ({\r\n        assistants: state.assistants.map((a) =>\r\n          a._id === assistant._id ? { ...a, ...assistant } : a\r\n        ),\r\n        loading: false,\r\n      }));\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n\r\n  deleteAssistant: async (id) => {\r\n    set({ loading: true, error: null });\r\n    try {\r\n      const res = await fetch(\"/api/asistant-tasks\", {\r\n        method: \"DELETE\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ id }),\r\n      });\r\n      const data = await res.json();\r\n      if (!res.ok) throw new Error(data.error || \"Error deleting assistant\");\r\n      set((state) => ({\r\n        assistants: state.assistants.filter((a) => a._id !== id),\r\n        loading: false,\r\n      }));\r\n    } catch (err: any) {\r\n      set({ error: err.message, loading: false });\r\n    }\r\n  },\r\n}));\r\n"],"names":[],"mappings":"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","debugId":null}}]
}