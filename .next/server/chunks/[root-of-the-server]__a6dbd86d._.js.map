{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/app/api/functions-tasks/%5BfunctionId%5D/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\nconst NEST_API_URL = process.env.NEST_API_URL || \"http://localhost:3001\";\r\n\r\n// PUT: Actualizar función\r\nexport async function PUT(\r\n  req: NextRequest,\r\n  { params }: { params: { functionId: string } }\r\n) {\r\n  try {\r\n    const body = await req.json();\r\n    const { functionId } = params;\r\n    const response = await fetch(\r\n      `${NEST_API_URL}/users/functions/${functionId}`,\r\n      {\r\n        method: \"PUT\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(body),\r\n      }\r\n    );\r\n    const data = await response.json();\r\n    return NextResponse.json(data, { status: response.status });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\n// DELETE: Eliminar función\r\nexport async function DELETE(\r\n  req: NextRequest,\r\n  { params }: { params: { functionId: string } }\r\n) {\r\n  try {\r\n    const { searchParams } = new URL(req.url);\r\n    const user_id = searchParams.get(\"user_id\");\r\n    const assistant_id = searchParams.get(\"assistant_id\");\r\n    const { functionId } = params;\r\n\r\n    if (!user_id || !assistant_id) {\r\n      return NextResponse.json(\r\n        { error: \"Missing parameters\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    const url = `${NEST_API_URL}/users/functions/${functionId}?user_id=${encodeURIComponent(\r\n      user_id\r\n    )}&assistant_id=${encodeURIComponent(assistant_id)}`;\r\n\r\n    const response = await fetch(url, { method: \"DELETE\" });\r\n    const data = await response.json();\r\n    return NextResponse.json(data, { status: response.status });\r\n  } catch (error) {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,eAAe,QAAQ,GAAG,CAAC,YAAY,IAAI;AAG1C,eAAe,IACpB,GAAgB,EAChB,EAAE,MAAM,EAAsC;IAE9C,IAAI;QACF,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,UAAU,EAAE,GAAG;QACvB,MAAM,WAAW,MAAM,MACrB,GAAG,aAAa,iBAAiB,EAAE,YAAY,EAC/C;YACE,QAAQ;YACR,SAAS;gBAAE,gBAAgB;YAAmB;YAC9C,MAAM,KAAK,SAAS,CAAC;QACvB;QAEF,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ,SAAS,MAAM;QAAC;IAC3D,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF;AAGO,eAAe,OACpB,GAAgB,EAChB,EAAE,MAAM,EAAsC;IAE9C,IAAI;QACF,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,IAAI,IAAI,GAAG;QACxC,MAAM,UAAU,aAAa,GAAG,CAAC;QACjC,MAAM,eAAe,aAAa,GAAG,CAAC;QACtC,MAAM,EAAE,UAAU,EAAE,GAAG;QAEvB,IAAI,CAAC,WAAW,CAAC,cAAc;YAC7B,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;gBAAE,OAAO;YAAqB,GAC9B;gBAAE,QAAQ;YAAI;QAElB;QAEA,MAAM,MAAM,GAAG,aAAa,iBAAiB,EAAE,WAAW,SAAS,EAAE,mBACnE,SACA,cAAc,EAAE,mBAAmB,eAAe;QAEpD,MAAM,WAAW,MAAM,MAAM,KAAK;YAAE,QAAQ;QAAS;QACrD,MAAM,OAAO,MAAM,SAAS,IAAI;QAChC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,MAAM;YAAE,QAAQ,SAAS,MAAM;QAAC;IAC3D,EAAE,OAAO,OAAO;QACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACtB;YAAE,OAAO;QAAwB,GACjC;YAAE,QAAQ;QAAI;IAElB;AACF","debugId":null}}]
}