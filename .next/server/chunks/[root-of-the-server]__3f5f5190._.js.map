{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 52, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/constants/routes.js"],"sourcesContent":["const ROUTES = {\r\n  PUBLIC: {\r\n    LOGIN: \"/login\",\r\n    REGISTER: \"/register\",\r\n    HOME: \"/\",\r\n    HELP: \"/help\",\r\n  },\r\n  PROTECTED: {\r\n    DASHBOARD: \"/dashboard\", //dashboard y perfil\r\n  },\r\n};\r\n\r\nexport default ROUTES;\r\n"],"names":[],"mappings":";;;AAAA,MAAM,SAAS;IACb,QAAQ;QACN,OAAO;QACP,UAAU;QACV,MAAM;QACN,MAAM;IACR;IACA,WAAW;QACT,WAAW;IACb;AACF;uCAEe","debugId":null}},
    {"offset": {"line": 169, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/app/api/auth/%5B...nextauth%5D/route.ts"],"sourcesContent":["import ROUTES from \"@/constants/routes\";\r\n\r\nimport NextAuth, { Session, User } from \"next-auth\";\r\nimport CredentialsProvider from \"next-auth/providers/credentials\";\r\nimport GoogleProvider from \"next-auth/providers/google\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\ndeclare module \"next-auth\" {\r\n  interface Session {\r\n    accessToken?: string;\r\n    binding_id?: string;\r\n    name?: string;\r\n    email?: string;\r\n    image?: string;\r\n  }\r\n  interface User {\r\n    binding_id?: string;\r\n    token?: string;\r\n  }\r\n}\r\n\r\nconst NEXT_PUBLIC_API_URL = process.env.NEXT_PUBLIC_API_URL;\r\n\r\nconst handler = NextAuth({\r\n  providers: [\r\n    GoogleProvider({\r\n      clientId: process.env.GOOGLE_CLIENT_ID!,\r\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\r\n    }),\r\n    CredentialsProvider({\r\n      name: \"Credentials\",\r\n      credentials: {\r\n        email: { label: \"Email\", type: \"text\" },\r\n        password: { label: \"Password\", type: \"password\" },\r\n      },\r\n\r\n      async authorize(credentials) {\r\n        try {\r\n          const res = await fetch(`${NEXT_PUBLIC_API_URL}/auth/login`, {\r\n            method: \"POST\",\r\n            headers: { \"Content-Type\": \"application/json\" },\r\n            body: JSON.stringify({\r\n              email: credentials?.email,\r\n              password: credentials?.password,\r\n            }),\r\n          });\r\n\r\n          console.log(\"Estado de la respuesta:\", res.status);\r\n\r\n          if (!res.ok) {\r\n            const errorData = await res.json();\r\n            console.error(\"Error del backend:\", errorData);\r\n\r\n            // Propaga el mensaje de error específico del backend\r\n            throw new Error(errorData.message || \"Credenciales inválidas\");\r\n          }\r\n\r\n          // Extraer el token JWT de la cookie\r\n          const setCookieHeader = res.headers.get(\"set-cookie\");\r\n          if (!setCookieHeader) {\r\n            throw new Error(\"No se encontró el token en las cookies\");\r\n          }\r\n\r\n          // Extraer el token de la cookie\r\n          const tokenMatch = setCookieHeader.match(/jwt=([^;]+)/);\r\n          if (!tokenMatch) {\r\n            throw new Error(\"No se pudo extraer el token JWT de la cookie\");\r\n          }\r\n\r\n          const token = tokenMatch[1];\r\n          console.log(\"Token extraído:\", token);\r\n\r\n          // Decodificar el token JWT para extraer los datos del usuario\r\n          const decodedToken = jwt.decode(token) as jwt.JwtPayload;\r\n          console.log(\"Datos decodificados del token:\", decodedToken);\r\n\r\n          return {\r\n            id: String(decodedToken.sub),\r\n            token,\r\n            name: decodedToken.name as string,\r\n            email: decodedToken.email,\r\n            image: decodedToken.image,\r\n            binding_id: decodedToken.binding_id,\r\n          };\r\n        } catch (error) {\r\n          console.error(\"Error en authorize:\", error);\r\n          if (error instanceof Error) {\r\n            throw new Error(\r\n              error.message || \"Error al conectar con el servidor\"\r\n            );\r\n          } else {\r\n            throw new Error(\"Error desconocido al conectar con el servidor\");\r\n          }\r\n        }\r\n      },\r\n    }),\r\n  ],\r\n  callbacks: {\r\n    async signIn({ user, account }) {\r\n      if (account?.provider === \"google\") {\r\n        try {\r\n          // Solicitar el token personalizado al backend\r\n          const response = await fetch(\r\n            `${process.env.NEXT_PUBLIC_API_URL}/auth/google-login`,\r\n            {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({\r\n                email: user.email,\r\n                name: user.name,\r\n                image: user.image,\r\n                googleId: user.id,\r\n              }),\r\n            }\r\n          );\r\n\r\n          const data = await response.json();\r\n\r\n          if (!response.ok) {\r\n            throw new Error(data.message || \"Error en el login con Google\");\r\n          }\r\n\r\n          // Adjuntar el token personalizado al usuario\r\n          user.token = data.token; // Aquí se espera que el backend devuelva el token personalizado\r\n          return true;\r\n        } catch (error) {\r\n          console.error(\"Error en Google SignIn:\", error);\r\n          return false;\r\n        }\r\n      }\r\n      return true;\r\n    },\r\n    async jwt({ token, user, account }) {\r\n      if (user) {\r\n        if (account?.provider === \"google\" && user.token) {\r\n          // Decodificar el token enviado desde el backend (Google)\r\n          const decoded = jwt.decode(user.token) as jwt.JwtPayload;\r\n          console.log(\"Token decodificado desde el backend (Google):\", decoded);\r\n\r\n          if (decoded) {\r\n            token.accessToken = user.token;\r\n            token.name = decoded.name;\r\n            token.email = decoded.email;\r\n            token.image = decoded.image;\r\n            token.binding_id = decoded.binding_id;\r\n          }\r\n        } else if (account?.provider === \"credentials\" && user.token) {\r\n          // Decodificar el token enviado desde el backend (Credenciales)\r\n          const decoded = jwt.decode(user.token) as jwt.JwtPayload;\r\n          console.log(\r\n            \"Token decodificado desde el backend (Credentials):\",\r\n            decoded\r\n          );\r\n\r\n          if (decoded) {\r\n            token.accessToken = user.token;\r\n            token.name = decoded.name;\r\n            token.email = decoded.email;\r\n            token.image = decoded.image;\r\n            token.binding_id = decoded.binding_id; // Asegúrate de que el binding_id se extraiga\r\n          }\r\n        }\r\n      }\r\n      return token;\r\n    },\r\n    async session({ session, token }) {\r\n      session.binding_id = token.binding_id as string;\r\n      return session;\r\n    },\r\n  },\r\n  events: {\r\n    async signIn({ user, account }) {\r\n      if (account?.provider === \"google\") {\r\n        try {\r\n          const response = await fetch(\r\n            `${process.env.NEXT_PUBLIC_API_URL}/auth/google-login`,\r\n            {\r\n              method: \"POST\",\r\n              headers: { \"Content-Type\": \"application/json\" },\r\n              body: JSON.stringify({\r\n                email: user.email,\r\n                name: user.name,\r\n                image: user.image,\r\n                googleId: user.id,\r\n              }),\r\n            }\r\n          );\r\n\r\n          const data = await response.json();\r\n          if (!response.ok)\r\n            throw new Error(data.message || \"Error en el login\");\r\n        } catch (error) {\r\n          console.error(\"Error en Google SignIn:\", error);\r\n        }\r\n      }\r\n    },\r\n  },\r\n\r\n  secret: process.env.NEXTAUTH_SECRET,\r\n  pages: {\r\n    signIn: ROUTES.PUBLIC.LOGIN, // Página personalizada de inicio de sesión\r\n    signOut: ROUTES.PUBLIC.LOGIN, // Página personalizada de cierre de sesión\r\n  },\r\n});\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AACA;;;;;;AAgBA,MAAM;AAEN,MAAM,UAAU,CAAA,GAAA,uIAAA,CAAA,UAAQ,AAAD,EAAE;IACvB,WAAW;QACT,CAAA,GAAA,qJAAA,CAAA,UAAc,AAAD,EAAE;YACb,UAAU,QAAQ,GAAG,CAAC,gBAAgB;YACtC,cAAc,QAAQ,GAAG,CAAC,oBAAoB;QAChD;QACA,CAAA,GAAA,0JAAA,CAAA,UAAmB,AAAD,EAAE;YAClB,MAAM;YACN,aAAa;gBACX,OAAO;oBAAE,OAAO;oBAAS,MAAM;gBAAO;gBACtC,UAAU;oBAAE,OAAO;oBAAY,MAAM;gBAAW;YAClD;YAEA,MAAM,WAAU,WAAW;gBACzB,IAAI;oBACF,MAAM,MAAM,MAAM,MAAM,GAAG,oBAAoB,WAAW,CAAC,EAAE;wBAC3D,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,aAAa;4BACpB,UAAU,aAAa;wBACzB;oBACF;oBAEA,QAAQ,GAAG,CAAC,2BAA2B,IAAI,MAAM;oBAEjD,IAAI,CAAC,IAAI,EAAE,EAAE;wBACX,MAAM,YAAY,MAAM,IAAI,IAAI;wBAChC,QAAQ,KAAK,CAAC,sBAAsB;wBAEpC,qDAAqD;wBACrD,MAAM,IAAI,MAAM,UAAU,OAAO,IAAI;oBACvC;oBAEA,oCAAoC;oBACpC,MAAM,kBAAkB,IAAI,OAAO,CAAC,GAAG,CAAC;oBACxC,IAAI,CAAC,iBAAiB;wBACpB,MAAM,IAAI,MAAM;oBAClB;oBAEA,gCAAgC;oBAChC,MAAM,aAAa,gBAAgB,KAAK,CAAC;oBACzC,IAAI,CAAC,YAAY;wBACf,MAAM,IAAI,MAAM;oBAClB;oBAEA,MAAM,QAAQ,UAAU,CAAC,EAAE;oBAC3B,QAAQ,GAAG,CAAC,mBAAmB;oBAE/B,8DAA8D;oBAC9D,MAAM,eAAe,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC;oBAChC,QAAQ,GAAG,CAAC,kCAAkC;oBAE9C,OAAO;wBACL,IAAI,OAAO,aAAa,GAAG;wBAC3B;wBACA,MAAM,aAAa,IAAI;wBACvB,OAAO,aAAa,KAAK;wBACzB,OAAO,aAAa,KAAK;wBACzB,YAAY,aAAa,UAAU;oBACrC;gBACF,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,uBAAuB;oBACrC,IAAI,iBAAiB,OAAO;wBAC1B,MAAM,IAAI,MACR,MAAM,OAAO,IAAI;oBAErB,OAAO;wBACL,MAAM,IAAI,MAAM;oBAClB;gBACF;YACF;QACF;KACD;IACD,WAAW;QACT,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,IAAI,SAAS,aAAa,UAAU;gBAClC,IAAI;oBACF,8CAA8C;oBAC9C,MAAM,WAAW,MAAM,MACrB,6DAAmC,kBAAkB,CAAC,EACtD;wBACE,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,OAAO,KAAK,KAAK;4BACjB,UAAU,KAAK,EAAE;wBACnB;oBACF;oBAGF,MAAM,OAAO,MAAM,SAAS,IAAI;oBAEhC,IAAI,CAAC,SAAS,EAAE,EAAE;wBAChB,MAAM,IAAI,MAAM,KAAK,OAAO,IAAI;oBAClC;oBAEA,6CAA6C;oBAC7C,KAAK,KAAK,GAAG,KAAK,KAAK,EAAE,gEAAgE;oBACzF,OAAO;gBACT,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,2BAA2B;oBACzC,OAAO;gBACT;YACF;YACA,OAAO;QACT;QACA,MAAM,KAAI,EAAE,KAAK,EAAE,IAAI,EAAE,OAAO,EAAE;YAChC,IAAI,MAAM;gBACR,IAAI,SAAS,aAAa,YAAY,KAAK,KAAK,EAAE;oBAChD,yDAAyD;oBACzD,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,KAAK,KAAK;oBACrC,QAAQ,GAAG,CAAC,iDAAiD;oBAE7D,IAAI,SAAS;wBACX,MAAM,WAAW,GAAG,KAAK,KAAK;wBAC9B,MAAM,IAAI,GAAG,QAAQ,IAAI;wBACzB,MAAM,KAAK,GAAG,QAAQ,KAAK;wBAC3B,MAAM,KAAK,GAAG,QAAQ,KAAK;wBAC3B,MAAM,UAAU,GAAG,QAAQ,UAAU;oBACvC;gBACF,OAAO,IAAI,SAAS,aAAa,iBAAiB,KAAK,KAAK,EAAE;oBAC5D,+DAA+D;oBAC/D,MAAM,UAAU,uIAAA,CAAA,UAAG,CAAC,MAAM,CAAC,KAAK,KAAK;oBACrC,QAAQ,GAAG,CACT,sDACA;oBAGF,IAAI,SAAS;wBACX,MAAM,WAAW,GAAG,KAAK,KAAK;wBAC9B,MAAM,IAAI,GAAG,QAAQ,IAAI;wBACzB,MAAM,KAAK,GAAG,QAAQ,KAAK;wBAC3B,MAAM,KAAK,GAAG,QAAQ,KAAK;wBAC3B,MAAM,UAAU,GAAG,QAAQ,UAAU,EAAE,6CAA6C;oBACtF;gBACF;YACF;YACA,OAAO;QACT;QACA,MAAM,SAAQ,EAAE,OAAO,EAAE,KAAK,EAAE;YAC9B,QAAQ,UAAU,GAAG,MAAM,UAAU;YACrC,OAAO;QACT;IACF;IACA,QAAQ;QACN,MAAM,QAAO,EAAE,IAAI,EAAE,OAAO,EAAE;YAC5B,IAAI,SAAS,aAAa,UAAU;gBAClC,IAAI;oBACF,MAAM,WAAW,MAAM,MACrB,6DAAmC,kBAAkB,CAAC,EACtD;wBACE,QAAQ;wBACR,SAAS;4BAAE,gBAAgB;wBAAmB;wBAC9C,MAAM,KAAK,SAAS,CAAC;4BACnB,OAAO,KAAK,KAAK;4BACjB,MAAM,KAAK,IAAI;4BACf,OAAO,KAAK,KAAK;4BACjB,UAAU,KAAK,EAAE;wBACnB;oBACF;oBAGF,MAAM,OAAO,MAAM,SAAS,IAAI;oBAChC,IAAI,CAAC,SAAS,EAAE,EACd,MAAM,IAAI,MAAM,KAAK,OAAO,IAAI;gBACpC,EAAE,OAAO,OAAO;oBACd,QAAQ,KAAK,CAAC,2BAA2B;gBAC3C;YACF;QACF;IACF;IAEA,QAAQ,QAAQ,GAAG,CAAC,eAAe;IACnC,OAAO;QACL,QAAQ,qHAAA,CAAA,UAAM,CAAC,MAAM,CAAC,KAAK;QAC3B,SAAS,qHAAA,CAAA,UAAM,CAAC,MAAM,CAAC,KAAK;IAC9B;AACF","debugId":null}}]
}