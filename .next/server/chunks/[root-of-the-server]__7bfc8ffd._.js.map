{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/aronc/Home/bot_saas_gpt/chat-bot-saas/app/api/asistant-tasks/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from \"next/server\";\r\n\r\n// Cambia esto por la URL real de tu backend NestJS\r\nconst NEST_API_URL = process.env.NEST_API_URL || \"http://localhost:8080\";\r\n\r\nexport async function GET(req: NextRequest) {\r\n  const { searchParams } = new URL(req.url);\r\n  const user_id = searchParams.get(\"user_id\");\r\n\r\n  if (!user_id) {\r\n    return NextResponse.json(\r\n      { error: \"Missing user_id query parameter\" },\r\n      { status: 400 }\r\n    );\r\n  }\r\n\r\n  try {\r\n    const response = await fetch(\r\n      `${NEST_API_URL}/users/assistant-chats?user_id=${encodeURIComponent(\r\n        user_id\r\n      )}`\r\n    );\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return NextResponse.json(\r\n        { error: data.message || \"Error fetching assistant chats\" },\r\n        { status: response.status }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(data, { status: 200 });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n\r\n    // Validar campos requeridos\r\n    const requiredFields = [\r\n      \"user_id\",\r\n      \"name\",\r\n      \"description\",\r\n      \"funciones\",\r\n      \"type\",\r\n      \"status\",\r\n      \"use_case\",\r\n      \"welcome_message\",\r\n    ];\r\n    for (const field of requiredFields) {\r\n      if (!body[field]) {\r\n        return NextResponse.json(\r\n          { error: `Missing field: ${field}` },\r\n          { status: 400 }\r\n        );\r\n      }\r\n    }\r\n\r\n    // Llama al endpoint de NestJS\r\n    const response = await fetch(`${NEST_API_URL}/users/assistant-chats`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return NextResponse.json(\r\n        { error: data.message || \"Error creating assistant chat\" },\r\n        { status: response.status }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(data, { status: 201 });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function PATCH(req: NextRequest) {\r\n  try {\r\n    const body = await req.json();\r\n    const { id, ...updateFields } = body;\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"Missing assistant chat id\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Llama al endpoint de actualización de tu backend (ajusta la ruta según tu API)\r\n    const response = await fetch(`${NEST_API_URL}/users/assistant-chat/${id}`, {\r\n      method: \"PATCH\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(updateFields),\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return NextResponse.json(\r\n        { error: data.message || \"Error updating assistant chat\" },\r\n        { status: response.status }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(data, { status: 200 });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n\r\nexport async function DELETE(req: NextRequest) {\r\n  try {\r\n    const { id } = await req.json();\r\n\r\n    if (!id) {\r\n      return NextResponse.json(\r\n        { error: \"Missing assistant chat id\" },\r\n        { status: 400 }\r\n      );\r\n    }\r\n\r\n    // Llama al endpoint de eliminación de tu backend (ajusta la ruta según tu API)\r\n    const response = await fetch(`${NEST_API_URL}/users/assistant-chat/${id}`, {\r\n      method: \"DELETE\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n    });\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) {\r\n      return NextResponse.json(\r\n        { error: data.message || \"Error deleting assistant chat\" },\r\n        { status: response.status }\r\n      );\r\n    }\r\n\r\n    return NextResponse.json(data, { status: 200 });\r\n  } catch {\r\n    return NextResponse.json(\r\n      { error: \"Internal server error\" },\r\n      { status: 500 }\r\n    );\r\n  }\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}}]
}